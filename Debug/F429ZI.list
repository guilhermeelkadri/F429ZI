
F429ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034cc  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003678  08003678  00013678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036a0  080036a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080036a0  080036a0  000136a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036a8  080036a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036a8  080036a8  000136a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036ac  080036ac  000136ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080036b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000500  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000050c  2000050c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e15c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bdc  00000000  00000000  0002e198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a38  00000000  00000000  0002fd78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009a0  00000000  00000000  000307b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000240b6  00000000  00000000  00031150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bf06  00000000  00000000  00055206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc45b  00000000  00000000  0006110c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013d567  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ab4  00000000  00000000  0013d5bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003660 	.word	0x08003660

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08003660 	.word	0x08003660

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b590      	push	{r4, r7, lr}
 80004e6:	b08b      	sub	sp, #44	; 0x2c
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t data[] = "HELLO WORLD \r\n";
 80004ea:	4b31      	ldr	r3, [pc, #196]	; (80005b0 <main+0xcc>)
 80004ec:	f107 0410 	add.w	r4, r7, #16
 80004f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004f2:	c407      	stmia	r4!, {r0, r1, r2}
 80004f4:	8023      	strh	r3, [r4, #0]
 80004f6:	3402      	adds	r4, #2
 80004f8:	0c1b      	lsrs	r3, r3, #16
 80004fa:	7023      	strb	r3, [r4, #0]
  uint8_t Rx_data[10];
  uint16_t checksum = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 fc92 	bl	8000e28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f85c 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 f98e 	bl	8000828 <MX_GPIO_Init>
  MX_ETH_Init();
 800050c:	f000 f8c2 	bl	8000694 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000510:	f000 f932 	bl	8000778 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000514:	f000 f95a 	bl	80007cc <MX_USB_OTG_FS_PCD_Init>
  MX_UART5_Init();
 8000518:	f000 f904 	bl	8000724 <MX_UART5_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // Dimeeriza o led pela uart
    if(UART5->SR & USART_SR_TXE)
 800051c:	4b25      	ldr	r3, [pc, #148]	; (80005b4 <main+0xd0>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000524:	2b00      	cmp	r3, #0
 8000526:	d002      	beq.n	800052e <main+0x4a>
      UART5->DR = 0;
 8000528:	4b22      	ldr	r3, [pc, #136]	; (80005b4 <main+0xd0>)
 800052a:	2200      	movs	r2, #0
 800052c:	605a      	str	r2, [r3, #4]


    HAL_UART_Transmit(&huart5, data, sizeof(data), 10);
 800052e:	f107 0110 	add.w	r1, r7, #16
 8000532:	230a      	movs	r3, #10
 8000534:	220f      	movs	r2, #15
 8000536:	4820      	ldr	r0, [pc, #128]	; (80005b8 <main+0xd4>)
 8000538:	f002 fa1b 	bl	8002972 <HAL_UART_Transmit>

    // toggle LED
    HAL_GPIO_TogglePin(GPIOB, LD1_Pin); // toggle LED
 800053c:	2101      	movs	r1, #1
 800053e:	481f      	ldr	r0, [pc, #124]	; (80005bc <main+0xd8>)
 8000540:	f001 fc1f 	bl	8001d82 <HAL_GPIO_TogglePin>

    HAL_UART_Receive(&huart5, Rx_data, 4, 100);
 8000544:	1d39      	adds	r1, r7, #4
 8000546:	2364      	movs	r3, #100	; 0x64
 8000548:	2204      	movs	r2, #4
 800054a:	481b      	ldr	r0, [pc, #108]	; (80005b8 <main+0xd4>)
 800054c:	f002 faa3 	bl	8002a96 <HAL_UART_Receive>
    if(hal_state == HAL_TIMEOUT)
    {
      // fim de string
    }

    for (int j = 0; j < sizeof(Rx_data); j++)
 8000550:	2300      	movs	r3, #0
 8000552:	623b      	str	r3, [r7, #32]
 8000554:	e027      	b.n	80005a6 <main+0xc2>
    {
      if ((Rx_data[j] > 64 || Rx_data[j] < 91) || (Rx_data[j] > 96 || Rx_data[j] < 123))
 8000556:	1d3a      	adds	r2, r7, #4
 8000558:	6a3b      	ldr	r3, [r7, #32]
 800055a:	4413      	add	r3, r2
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	2b40      	cmp	r3, #64	; 0x40
 8000560:	d816      	bhi.n	8000590 <main+0xac>
 8000562:	1d3a      	adds	r2, r7, #4
 8000564:	6a3b      	ldr	r3, [r7, #32]
 8000566:	4413      	add	r3, r2
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	2b5a      	cmp	r3, #90	; 0x5a
 800056c:	d910      	bls.n	8000590 <main+0xac>
 800056e:	1d3a      	adds	r2, r7, #4
 8000570:	6a3b      	ldr	r3, [r7, #32]
 8000572:	4413      	add	r3, r2
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b60      	cmp	r3, #96	; 0x60
 8000578:	d80a      	bhi.n	8000590 <main+0xac>
 800057a:	1d3a      	adds	r2, r7, #4
 800057c:	6a3b      	ldr	r3, [r7, #32]
 800057e:	4413      	add	r3, r2
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2b7a      	cmp	r3, #122	; 0x7a
 8000584:	d904      	bls.n	8000590 <main+0xac>
      {
        // É caracter
      }
      else if (Rx_data[j] > 47 || Rx_data[j] < 58)
 8000586:	1d3a      	adds	r2, r7, #4
 8000588:	6a3b      	ldr	r3, [r7, #32]
 800058a:	4413      	add	r3, r2
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b2f      	cmp	r3, #47	; 0x2f
      {
        // É simbolo
      }

      // Calcula o check sum da string recebido pela UART
      checksum += Rx_data[j];
 8000590:	1d3a      	adds	r2, r7, #4
 8000592:	6a3b      	ldr	r3, [r7, #32]
 8000594:	4413      	add	r3, r2
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	b29a      	uxth	r2, r3
 800059a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800059c:	4413      	add	r3, r2
 800059e:	84fb      	strh	r3, [r7, #38]	; 0x26
    for (int j = 0; j < sizeof(Rx_data); j++)
 80005a0:	6a3b      	ldr	r3, [r7, #32]
 80005a2:	3301      	adds	r3, #1
 80005a4:	623b      	str	r3, [r7, #32]
 80005a6:	6a3b      	ldr	r3, [r7, #32]
 80005a8:	2b09      	cmp	r3, #9
 80005aa:	d9d4      	bls.n	8000556 <main+0x72>
    if(UART5->SR & USART_SR_TXE)
 80005ac:	e7b6      	b.n	800051c <main+0x38>
 80005ae:	bf00      	nop
 80005b0:	08003678 	.word	0x08003678
 80005b4:	40005000 	.word	0x40005000
 80005b8:	2000047c 	.word	0x2000047c
 80005bc:	40020400 	.word	0x40020400

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	; 0x50
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0320 	add.w	r3, r7, #32
 80005ca:	2230      	movs	r2, #48	; 0x30
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f003 f83e 	bl	8003650 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	4b28      	ldr	r3, [pc, #160]	; (800068c <SystemClock_Config+0xcc>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	4a27      	ldr	r2, [pc, #156]	; (800068c <SystemClock_Config+0xcc>)
 80005ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f2:	6413      	str	r3, [r2, #64]	; 0x40
 80005f4:	4b25      	ldr	r3, [pc, #148]	; (800068c <SystemClock_Config+0xcc>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	4b22      	ldr	r3, [pc, #136]	; (8000690 <SystemClock_Config+0xd0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a21      	ldr	r2, [pc, #132]	; (8000690 <SystemClock_Config+0xd0>)
 800060a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <SystemClock_Config+0xd0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800061c:	2301      	movs	r3, #1
 800061e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000620:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000624:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000626:	2302      	movs	r3, #2
 8000628:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800062e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000630:	2304      	movs	r3, #4
 8000632:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000634:	23a8      	movs	r3, #168	; 0xa8
 8000636:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000638:	2302      	movs	r3, #2
 800063a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800063c:	2307      	movs	r3, #7
 800063e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	f107 0320 	add.w	r3, r7, #32
 8000644:	4618      	mov	r0, r3
 8000646:	f001 fcd3 	bl	8001ff0 <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000650:	f000 f998 	bl	8000984 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000654:	230f      	movs	r3, #15
 8000656:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000658:	2302      	movs	r3, #2
 800065a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000660:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000664:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000666:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800066a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	2105      	movs	r1, #5
 8000672:	4618      	mov	r0, r3
 8000674:	f001 ff34 	bl	80024e0 <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800067e:	f000 f981 	bl	8000984 <Error_Handler>
  }
}
 8000682:	bf00      	nop
 8000684:	3750      	adds	r7, #80	; 0x50
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40023800 	.word	0x40023800
 8000690:	40007000 	.word	0x40007000

08000694 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000698:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <MX_ETH_Init+0x84>)
 800069a:	4a20      	ldr	r2, [pc, #128]	; (800071c <MX_ETH_Init+0x88>)
 800069c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800069e:	4b1e      	ldr	r3, [pc, #120]	; (8000718 <MX_ETH_Init+0x84>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80006a4:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <MX_ETH_Init+0x84>)
 80006a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006aa:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80006ac:	4b1a      	ldr	r3, [pc, #104]	; (8000718 <MX_ETH_Init+0x84>)
 80006ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006b2:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80006b4:	4b18      	ldr	r3, [pc, #96]	; (8000718 <MX_ETH_Init+0x84>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80006ba:	4b19      	ldr	r3, [pc, #100]	; (8000720 <MX_ETH_Init+0x8c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <MX_ETH_Init+0x8c>)
 80006c2:	2280      	movs	r2, #128	; 0x80
 80006c4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006c6:	4b16      	ldr	r3, [pc, #88]	; (8000720 <MX_ETH_Init+0x8c>)
 80006c8:	22e1      	movs	r2, #225	; 0xe1
 80006ca:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006cc:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_ETH_Init+0x8c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006d2:	4b13      	ldr	r3, [pc, #76]	; (8000720 <MX_ETH_Init+0x8c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006d8:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_ETH_Init+0x8c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_ETH_Init+0x84>)
 80006e0:	4a0f      	ldr	r2, [pc, #60]	; (8000720 <MX_ETH_Init+0x8c>)
 80006e2:	615a      	str	r2, [r3, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_ETH_Init+0x84>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <MX_ETH_Init+0x84>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80006f0:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_ETH_Init+0x84>)
 80006f2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006f6:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK && HAL_ETH_Init(&heth) != HAL_TIMEOUT)
 80006f8:	4807      	ldr	r0, [pc, #28]	; (8000718 <MX_ETH_Init+0x84>)
 80006fa:	f000 fd11 	bl	8001120 <HAL_ETH_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d007      	beq.n	8000714 <MX_ETH_Init+0x80>
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <MX_ETH_Init+0x84>)
 8000706:	f000 fd0b 	bl	8001120 <HAL_ETH_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b03      	cmp	r3, #3
 800070e:	d001      	beq.n	8000714 <MX_ETH_Init+0x80>
  {
    Error_Handler();
 8000710:	f000 f938 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */
}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	200004c0 	.word	0x200004c0
 800071c:	40028000 	.word	0x40028000
 8000720:	20000028 	.word	0x20000028

08000724 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_UART5_Init+0x4c>)
 800072a:	4a12      	ldr	r2, [pc, #72]	; (8000774 <MX_UART5_Init+0x50>)
 800072c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <MX_UART5_Init+0x4c>)
 8000730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000734:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_UART5_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_UART5_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_UART5_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_UART5_Init+0x4c>)
 800074a:	220c      	movs	r2, #12
 800074c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_UART5_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_UART5_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_UART5_Init+0x4c>)
 800075c:	f002 f8bc 	bl	80028d8 <HAL_UART_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000766:	f000 f90d 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	2000047c 	.word	0x2000047c
 8000774:	40005000 	.word	0x40005000

08000778 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_USART3_UART_Init+0x4c>)
 800077e:	4a12      	ldr	r2, [pc, #72]	; (80007c8 <MX_USART3_UART_Init+0x50>)
 8000780:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <MX_USART3_UART_Init+0x4c>)
 8000784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000788:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_USART3_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_USART3_UART_Init+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MX_USART3_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_USART3_UART_Init+0x4c>)
 800079e:	220c      	movs	r2, #12
 80007a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <MX_USART3_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_USART3_UART_Init+0x4c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_USART3_UART_Init+0x4c>)
 80007b0:	f002 f892 	bl	80028d8 <HAL_UART_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007ba:	f000 f8e3 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000030 	.word	0x20000030
 80007c8:	40004800 	.word	0x40004800

080007cc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007da:	2204      	movs	r2, #4
 80007dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e0:	2202      	movs	r2, #2
 80007e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ec:	2202      	movs	r2, #2
 80007ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fe:	2200      	movs	r2, #0
 8000800:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000804:	2201      	movs	r2, #1
 8000806:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000810:	f001 fad1 	bl	8001db6 <HAL_PCD_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800081a:	f000 f8b3 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000074 	.word	0x20000074

08000828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08c      	sub	sp, #48	; 0x30
 800082c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	61bb      	str	r3, [r7, #24]
 8000842:	4b4c      	ldr	r3, [pc, #304]	; (8000974 <MX_GPIO_Init+0x14c>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a4b      	ldr	r2, [pc, #300]	; (8000974 <MX_GPIO_Init+0x14c>)
 8000848:	f043 0304 	orr.w	r3, r3, #4
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b49      	ldr	r3, [pc, #292]	; (8000974 <MX_GPIO_Init+0x14c>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0304 	and.w	r3, r3, #4
 8000856:	61bb      	str	r3, [r7, #24]
 8000858:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
 800085e:	4b45      	ldr	r3, [pc, #276]	; (8000974 <MX_GPIO_Init+0x14c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a44      	ldr	r2, [pc, #272]	; (8000974 <MX_GPIO_Init+0x14c>)
 8000864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b42      	ldr	r3, [pc, #264]	; (8000974 <MX_GPIO_Init+0x14c>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000872:	617b      	str	r3, [r7, #20]
 8000874:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
 800087a:	4b3e      	ldr	r3, [pc, #248]	; (8000974 <MX_GPIO_Init+0x14c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a3d      	ldr	r2, [pc, #244]	; (8000974 <MX_GPIO_Init+0x14c>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b3b      	ldr	r3, [pc, #236]	; (8000974 <MX_GPIO_Init+0x14c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	4b37      	ldr	r3, [pc, #220]	; (8000974 <MX_GPIO_Init+0x14c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a36      	ldr	r2, [pc, #216]	; (8000974 <MX_GPIO_Init+0x14c>)
 800089c:	f043 0302 	orr.w	r3, r3, #2
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b34      	ldr	r3, [pc, #208]	; (8000974 <MX_GPIO_Init+0x14c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0302 	and.w	r3, r3, #2
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	4b30      	ldr	r3, [pc, #192]	; (8000974 <MX_GPIO_Init+0x14c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a2f      	ldr	r2, [pc, #188]	; (8000974 <MX_GPIO_Init+0x14c>)
 80008b8:	f043 0308 	orr.w	r3, r3, #8
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b2d      	ldr	r3, [pc, #180]	; (8000974 <MX_GPIO_Init+0x14c>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0308 	and.w	r3, r3, #8
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b29      	ldr	r3, [pc, #164]	; (8000974 <MX_GPIO_Init+0x14c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a28      	ldr	r2, [pc, #160]	; (8000974 <MX_GPIO_Init+0x14c>)
 80008d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b26      	ldr	r3, [pc, #152]	; (8000974 <MX_GPIO_Init+0x14c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	f244 0181 	movw	r1, #16513	; 0x4081
 80008ec:	4822      	ldr	r0, [pc, #136]	; (8000978 <MX_GPIO_Init+0x150>)
 80008ee:	f001 fa2f 	bl	8001d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2140      	movs	r1, #64	; 0x40
 80008f6:	4821      	ldr	r0, [pc, #132]	; (800097c <MX_GPIO_Init+0x154>)
 80008f8:	f001 fa2a 	bl	8001d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000902:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	481b      	ldr	r0, [pc, #108]	; (8000980 <MX_GPIO_Init+0x158>)
 8000914:	f001 f870 	bl	80019f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8000918:	f244 0381 	movw	r3, #16513	; 0x4081
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091e:	2301      	movs	r3, #1
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	4811      	ldr	r0, [pc, #68]	; (8000978 <MX_GPIO_Init+0x150>)
 8000932:	f001 f861 	bl	80019f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000936:	2340      	movs	r3, #64	; 0x40
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	2301      	movs	r3, #1
 800093c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	480b      	ldr	r0, [pc, #44]	; (800097c <MX_GPIO_Init+0x154>)
 800094e:	f001 f853 	bl	80019f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000952:	2380      	movs	r3, #128	; 0x80
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000956:	2300      	movs	r3, #0
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_GPIO_Init+0x154>)
 8000966:	f001 f847 	bl	80019f8 <HAL_GPIO_Init>
}
 800096a:	bf00      	nop
 800096c:	3730      	adds	r7, #48	; 0x30
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800
 8000978:	40020400 	.word	0x40020400
 800097c:	40021800 	.word	0x40021800
 8000980:	40020800 	.word	0x40020800

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	e7fe      	b.n	800098c <Error_Handler+0x8>
	...

08000990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <HAL_MspInit+0x4c>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099e:	4a0f      	ldr	r2, [pc, #60]	; (80009dc <HAL_MspInit+0x4c>)
 80009a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a4:	6453      	str	r3, [r2, #68]	; 0x44
 80009a6:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <HAL_MspInit+0x4c>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	603b      	str	r3, [r7, #0]
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <HAL_MspInit+0x4c>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	4a08      	ldr	r2, [pc, #32]	; (80009dc <HAL_MspInit+0x4c>)
 80009bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c0:	6413      	str	r3, [r2, #64]	; 0x40
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_MspInit+0x4c>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800

080009e0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08e      	sub	sp, #56	; 0x38
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a55      	ldr	r2, [pc, #340]	; (8000b54 <HAL_ETH_MspInit+0x174>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	f040 80a4 	bne.w	8000b4c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a04:	2300      	movs	r3, #0
 8000a06:	623b      	str	r3, [r7, #32]
 8000a08:	4b53      	ldr	r3, [pc, #332]	; (8000b58 <HAL_ETH_MspInit+0x178>)
 8000a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0c:	4a52      	ldr	r2, [pc, #328]	; (8000b58 <HAL_ETH_MspInit+0x178>)
 8000a0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a12:	6313      	str	r3, [r2, #48]	; 0x30
 8000a14:	4b50      	ldr	r3, [pc, #320]	; (8000b58 <HAL_ETH_MspInit+0x178>)
 8000a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a1c:	623b      	str	r3, [r7, #32]
 8000a1e:	6a3b      	ldr	r3, [r7, #32]
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]
 8000a24:	4b4c      	ldr	r3, [pc, #304]	; (8000b58 <HAL_ETH_MspInit+0x178>)
 8000a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a28:	4a4b      	ldr	r2, [pc, #300]	; (8000b58 <HAL_ETH_MspInit+0x178>)
 8000a2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a30:	4b49      	ldr	r3, [pc, #292]	; (8000b58 <HAL_ETH_MspInit+0x178>)
 8000a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a38:	61fb      	str	r3, [r7, #28]
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61bb      	str	r3, [r7, #24]
 8000a40:	4b45      	ldr	r3, [pc, #276]	; (8000b58 <HAL_ETH_MspInit+0x178>)
 8000a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a44:	4a44      	ldr	r2, [pc, #272]	; (8000b58 <HAL_ETH_MspInit+0x178>)
 8000a46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000a4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4c:	4b42      	ldr	r3, [pc, #264]	; (8000b58 <HAL_ETH_MspInit+0x178>)
 8000a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000a54:	61bb      	str	r3, [r7, #24]
 8000a56:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]
 8000a5c:	4b3e      	ldr	r3, [pc, #248]	; (8000b58 <HAL_ETH_MspInit+0x178>)
 8000a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a60:	4a3d      	ldr	r2, [pc, #244]	; (8000b58 <HAL_ETH_MspInit+0x178>)
 8000a62:	f043 0304 	orr.w	r3, r3, #4
 8000a66:	6313      	str	r3, [r2, #48]	; 0x30
 8000a68:	4b3b      	ldr	r3, [pc, #236]	; (8000b58 <HAL_ETH_MspInit+0x178>)
 8000a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6c:	f003 0304 	and.w	r3, r3, #4
 8000a70:	617b      	str	r3, [r7, #20]
 8000a72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a74:	2300      	movs	r3, #0
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	4b37      	ldr	r3, [pc, #220]	; (8000b58 <HAL_ETH_MspInit+0x178>)
 8000a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7c:	4a36      	ldr	r2, [pc, #216]	; (8000b58 <HAL_ETH_MspInit+0x178>)
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	6313      	str	r3, [r2, #48]	; 0x30
 8000a84:	4b34      	ldr	r3, [pc, #208]	; (8000b58 <HAL_ETH_MspInit+0x178>)
 8000a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a90:	2300      	movs	r3, #0
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	4b30      	ldr	r3, [pc, #192]	; (8000b58 <HAL_ETH_MspInit+0x178>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a98:	4a2f      	ldr	r2, [pc, #188]	; (8000b58 <HAL_ETH_MspInit+0x178>)
 8000a9a:	f043 0302 	orr.w	r3, r3, #2
 8000a9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa0:	4b2d      	ldr	r3, [pc, #180]	; (8000b58 <HAL_ETH_MspInit+0x178>)
 8000aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa4:	f003 0302 	and.w	r3, r3, #2
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aac:	2300      	movs	r3, #0
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	4b29      	ldr	r3, [pc, #164]	; (8000b58 <HAL_ETH_MspInit+0x178>)
 8000ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab4:	4a28      	ldr	r2, [pc, #160]	; (8000b58 <HAL_ETH_MspInit+0x178>)
 8000ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aba:	6313      	str	r3, [r2, #48]	; 0x30
 8000abc:	4b26      	ldr	r3, [pc, #152]	; (8000b58 <HAL_ETH_MspInit+0x178>)
 8000abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ac8:	2332      	movs	r3, #50	; 0x32
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ad8:	230b      	movs	r3, #11
 8000ada:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	481e      	ldr	r0, [pc, #120]	; (8000b5c <HAL_ETH_MspInit+0x17c>)
 8000ae4:	f000 ff88 	bl	80019f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ae8:	2386      	movs	r3, #134	; 0x86
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af4:	2303      	movs	r3, #3
 8000af6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000af8:	230b      	movs	r3, #11
 8000afa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b00:	4619      	mov	r1, r3
 8000b02:	4817      	ldr	r0, [pc, #92]	; (8000b60 <HAL_ETH_MspInit+0x180>)
 8000b04:	f000 ff78 	bl	80019f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b16:	2303      	movs	r3, #3
 8000b18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b1a:	230b      	movs	r3, #11
 8000b1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b22:	4619      	mov	r1, r3
 8000b24:	480f      	ldr	r0, [pc, #60]	; (8000b64 <HAL_ETH_MspInit+0x184>)
 8000b26:	f000 ff67 	bl	80019f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b2a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b30:	2302      	movs	r3, #2
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b3c:	230b      	movs	r3, #11
 8000b3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b44:	4619      	mov	r1, r3
 8000b46:	4808      	ldr	r0, [pc, #32]	; (8000b68 <HAL_ETH_MspInit+0x188>)
 8000b48:	f000 ff56 	bl	80019f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000b4c:	bf00      	nop
 8000b4e:	3738      	adds	r7, #56	; 0x38
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40028000 	.word	0x40028000
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40020800 	.word	0x40020800
 8000b60:	40020000 	.word	0x40020000
 8000b64:	40020400 	.word	0x40020400
 8000b68:	40021800 	.word	0x40021800

08000b6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08c      	sub	sp, #48	; 0x30
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 031c 	add.w	r3, r7, #28
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a42      	ldr	r2, [pc, #264]	; (8000c94 <HAL_UART_MspInit+0x128>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d14b      	bne.n	8000c26 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61bb      	str	r3, [r7, #24]
 8000b92:	4b41      	ldr	r3, [pc, #260]	; (8000c98 <HAL_UART_MspInit+0x12c>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	4a40      	ldr	r2, [pc, #256]	; (8000c98 <HAL_UART_MspInit+0x12c>)
 8000b98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9e:	4b3e      	ldr	r3, [pc, #248]	; (8000c98 <HAL_UART_MspInit+0x12c>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ba6:	61bb      	str	r3, [r7, #24]
 8000ba8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]
 8000bae:	4b3a      	ldr	r3, [pc, #232]	; (8000c98 <HAL_UART_MspInit+0x12c>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a39      	ldr	r2, [pc, #228]	; (8000c98 <HAL_UART_MspInit+0x12c>)
 8000bb4:	f043 0304 	orr.w	r3, r3, #4
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b37      	ldr	r3, [pc, #220]	; (8000c98 <HAL_UART_MspInit+0x12c>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0304 	and.w	r3, r3, #4
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	4b33      	ldr	r3, [pc, #204]	; (8000c98 <HAL_UART_MspInit+0x12c>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a32      	ldr	r2, [pc, #200]	; (8000c98 <HAL_UART_MspInit+0x12c>)
 8000bd0:	f043 0308 	orr.w	r3, r3, #8
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b30      	ldr	r3, [pc, #192]	; (8000c98 <HAL_UART_MspInit+0x12c>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0308 	and.w	r3, r3, #8
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000be2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000bf4:	2308      	movs	r3, #8
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf8:	f107 031c 	add.w	r3, r7, #28
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4827      	ldr	r0, [pc, #156]	; (8000c9c <HAL_UART_MspInit+0x130>)
 8000c00:	f000 fefa 	bl	80019f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c04:	2304      	movs	r3, #4
 8000c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c10:	2303      	movs	r3, #3
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000c14:	2308      	movs	r3, #8
 8000c16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c18:	f107 031c 	add.w	r3, r7, #28
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4820      	ldr	r0, [pc, #128]	; (8000ca0 <HAL_UART_MspInit+0x134>)
 8000c20:	f000 feea 	bl	80019f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c24:	e031      	b.n	8000c8a <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART3)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a1e      	ldr	r2, [pc, #120]	; (8000ca4 <HAL_UART_MspInit+0x138>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d12c      	bne.n	8000c8a <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <HAL_UART_MspInit+0x12c>)
 8000c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c38:	4a17      	ldr	r2, [pc, #92]	; (8000c98 <HAL_UART_MspInit+0x12c>)
 8000c3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c40:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <HAL_UART_MspInit+0x12c>)
 8000c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <HAL_UART_MspInit+0x12c>)
 8000c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c54:	4a10      	ldr	r2, [pc, #64]	; (8000c98 <HAL_UART_MspInit+0x12c>)
 8000c56:	f043 0308 	orr.w	r3, r3, #8
 8000c5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5c:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <HAL_UART_MspInit+0x12c>)
 8000c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c60:	f003 0308 	and.w	r3, r3, #8
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c68:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c76:	2303      	movs	r3, #3
 8000c78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c7a:	2307      	movs	r3, #7
 8000c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c7e:	f107 031c 	add.w	r3, r7, #28
 8000c82:	4619      	mov	r1, r3
 8000c84:	4806      	ldr	r0, [pc, #24]	; (8000ca0 <HAL_UART_MspInit+0x134>)
 8000c86:	f000 feb7 	bl	80019f8 <HAL_GPIO_Init>
}
 8000c8a:	bf00      	nop
 8000c8c:	3730      	adds	r7, #48	; 0x30
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40005000 	.word	0x40005000
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40020800 	.word	0x40020800
 8000ca0:	40020c00 	.word	0x40020c00
 8000ca4:	40004800 	.word	0x40004800

08000ca8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cc8:	d13f      	bne.n	8000d4a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	4b21      	ldr	r3, [pc, #132]	; (8000d54 <HAL_PCD_MspInit+0xac>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a20      	ldr	r2, [pc, #128]	; (8000d54 <HAL_PCD_MspInit+0xac>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b1e      	ldr	r3, [pc, #120]	; (8000d54 <HAL_PCD_MspInit+0xac>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ce6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cec:	2302      	movs	r3, #2
 8000cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cf8:	230a      	movs	r3, #10
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	4619      	mov	r1, r3
 8000d02:	4815      	ldr	r0, [pc, #84]	; (8000d58 <HAL_PCD_MspInit+0xb0>)
 8000d04:	f000 fe78 	bl	80019f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d16:	f107 0314 	add.w	r3, r7, #20
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	480e      	ldr	r0, [pc, #56]	; (8000d58 <HAL_PCD_MspInit+0xb0>)
 8000d1e:	f000 fe6b 	bl	80019f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d22:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <HAL_PCD_MspInit+0xac>)
 8000d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d26:	4a0b      	ldr	r2, [pc, #44]	; (8000d54 <HAL_PCD_MspInit+0xac>)
 8000d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d2c:	6353      	str	r3, [r2, #52]	; 0x34
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <HAL_PCD_MspInit+0xac>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	4a07      	ldr	r2, [pc, #28]	; (8000d54 <HAL_PCD_MspInit+0xac>)
 8000d38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d3e:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <HAL_PCD_MspInit+0xac>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d4a:	bf00      	nop
 8000d4c:	3728      	adds	r7, #40	; 0x28
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40020000 	.word	0x40020000

08000d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <NMI_Handler+0x4>

08000d62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d66:	e7fe      	b.n	8000d66 <HardFault_Handler+0x4>

08000d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <MemManage_Handler+0x4>

08000d6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <BusFault_Handler+0x4>

08000d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <UsageFault_Handler+0x4>

08000d7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da8:	f000 f890 	bl	8000ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <SystemInit+0x20>)
 8000db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dba:	4a05      	ldr	r2, [pc, #20]	; (8000dd0 <SystemInit+0x20>)
 8000dbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000dd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e0c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dd8:	480d      	ldr	r0, [pc, #52]	; (8000e10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dda:	490e      	ldr	r1, [pc, #56]	; (8000e14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ddc:	4a0e      	ldr	r2, [pc, #56]	; (8000e18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de0:	e002      	b.n	8000de8 <LoopCopyDataInit>

08000de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de6:	3304      	adds	r3, #4

08000de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dec:	d3f9      	bcc.n	8000de2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dee:	4a0b      	ldr	r2, [pc, #44]	; (8000e1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000df0:	4c0b      	ldr	r4, [pc, #44]	; (8000e20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df4:	e001      	b.n	8000dfa <LoopFillZerobss>

08000df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df8:	3204      	adds	r2, #4

08000dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dfc:	d3fb      	bcc.n	8000df6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dfe:	f7ff ffd7 	bl	8000db0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e02:	f002 fc01 	bl	8003608 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e06:	f7ff fb6d 	bl	80004e4 <main>
  bx  lr    
 8000e0a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e0c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e14:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e18:	080036b0 	.word	0x080036b0
  ldr r2, =_sbss
 8000e1c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e20:	2000050c 	.word	0x2000050c

08000e24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e24:	e7fe      	b.n	8000e24 <ADC_IRQHandler>
	...

08000e28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e2c:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <HAL_Init+0x40>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a0d      	ldr	r2, [pc, #52]	; (8000e68 <HAL_Init+0x40>)
 8000e32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e38:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <HAL_Init+0x40>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0a      	ldr	r2, [pc, #40]	; (8000e68 <HAL_Init+0x40>)
 8000e3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e44:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <HAL_Init+0x40>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a07      	ldr	r2, [pc, #28]	; (8000e68 <HAL_Init+0x40>)
 8000e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e50:	2003      	movs	r0, #3
 8000e52:	f000 f931 	bl	80010b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e56:	2000      	movs	r0, #0
 8000e58:	f000 f808 	bl	8000e6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e5c:	f7ff fd98 	bl	8000990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40023c00 	.word	0x40023c00

08000e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <HAL_InitTick+0x54>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <HAL_InitTick+0x58>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 f93b 	bl	8001106 <HAL_SYSTICK_Config>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e00e      	b.n	8000eb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2b0f      	cmp	r3, #15
 8000e9e:	d80a      	bhi.n	8000eb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ea8:	f000 f911 	bl	80010ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eac:	4a06      	ldr	r2, [pc, #24]	; (8000ec8 <HAL_InitTick+0x5c>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e000      	b.n	8000eb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000000 	.word	0x20000000
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	20000004 	.word	0x20000004

08000ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_IncTick+0x20>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_IncTick+0x24>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4413      	add	r3, r2
 8000edc:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <HAL_IncTick+0x24>)
 8000ede:	6013      	str	r3, [r2, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20000008 	.word	0x20000008
 8000ef0:	20000508 	.word	0x20000508

08000ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef8:	4b03      	ldr	r3, [pc, #12]	; (8000f08 <HAL_GetTick+0x14>)
 8000efa:	681b      	ldr	r3, [r3, #0]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000508 	.word	0x20000508

08000f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f14:	f7ff ffee 	bl	8000ef4 <HAL_GetTick>
 8000f18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f24:	d005      	beq.n	8000f32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_Delay+0x44>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4413      	add	r3, r2
 8000f30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f32:	bf00      	nop
 8000f34:	f7ff ffde 	bl	8000ef4 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d8f7      	bhi.n	8000f34 <HAL_Delay+0x28>
  {
  }
}
 8000f44:	bf00      	nop
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000008 	.word	0x20000008

08000f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <__NVIC_SetPriorityGrouping+0x44>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6a:	68ba      	ldr	r2, [r7, #8]
 8000f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f70:	4013      	ands	r3, r2
 8000f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f86:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <__NVIC_SetPriorityGrouping+0x44>)
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	60d3      	str	r3, [r2, #12]
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	0a1b      	lsrs	r3, r3, #8
 8000fa6:	f003 0307 	and.w	r3, r3, #7
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	6039      	str	r1, [r7, #0]
 8000fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	db0a      	blt.n	8000fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	490c      	ldr	r1, [pc, #48]	; (8001004 <__NVIC_SetPriority+0x4c>)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	0112      	lsls	r2, r2, #4
 8000fd8:	b2d2      	uxtb	r2, r2
 8000fda:	440b      	add	r3, r1
 8000fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe0:	e00a      	b.n	8000ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4908      	ldr	r1, [pc, #32]	; (8001008 <__NVIC_SetPriority+0x50>)
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	f003 030f 	and.w	r3, r3, #15
 8000fee:	3b04      	subs	r3, #4
 8000ff0:	0112      	lsls	r2, r2, #4
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	440b      	add	r3, r1
 8000ff6:	761a      	strb	r2, [r3, #24]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000e100 	.word	0xe000e100
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800100c:	b480      	push	{r7}
 800100e:	b089      	sub	sp, #36	; 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f1c3 0307 	rsb	r3, r3, #7
 8001026:	2b04      	cmp	r3, #4
 8001028:	bf28      	it	cs
 800102a:	2304      	movcs	r3, #4
 800102c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3304      	adds	r3, #4
 8001032:	2b06      	cmp	r3, #6
 8001034:	d902      	bls.n	800103c <NVIC_EncodePriority+0x30>
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3b03      	subs	r3, #3
 800103a:	e000      	b.n	800103e <NVIC_EncodePriority+0x32>
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43da      	mvns	r2, r3
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	401a      	ands	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001054:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa01 f303 	lsl.w	r3, r1, r3
 800105e:	43d9      	mvns	r1, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	4313      	orrs	r3, r2
         );
}
 8001066:	4618      	mov	r0, r3
 8001068:	3724      	adds	r7, #36	; 0x24
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001084:	d301      	bcc.n	800108a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001086:	2301      	movs	r3, #1
 8001088:	e00f      	b.n	80010aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108a:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <SysTick_Config+0x40>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001092:	210f      	movs	r1, #15
 8001094:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001098:	f7ff ff8e 	bl	8000fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <SysTick_Config+0x40>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a2:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <SysTick_Config+0x40>)
 80010a4:	2207      	movs	r2, #7
 80010a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	e000e010 	.word	0xe000e010

080010b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff ff47 	bl	8000f54 <__NVIC_SetPriorityGrouping>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b086      	sub	sp, #24
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	4603      	mov	r3, r0
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]
 80010da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e0:	f7ff ff5c 	bl	8000f9c <__NVIC_GetPriorityGrouping>
 80010e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	68b9      	ldr	r1, [r7, #8]
 80010ea:	6978      	ldr	r0, [r7, #20]
 80010ec:	f7ff ff8e 	bl	800100c <NVIC_EncodePriority>
 80010f0:	4602      	mov	r2, r0
 80010f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f6:	4611      	mov	r1, r2
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff5d 	bl	8000fb8 <__NVIC_SetPriority>
}
 80010fe:	bf00      	nop
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff ffb0 	bl	8001074 <SysTick_Config>
 8001114:	4603      	mov	r3, r0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001130:	4baa      	ldr	r3, [pc, #680]	; (80013dc <HAL_ETH_Init+0x2bc>)
 8001132:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001138:	2300      	movs	r3, #0
 800113a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e183      	b.n	800144e <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	d106      	bne.n	8001160 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff fc40 	bl	80009e0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001160:	2300      	movs	r3, #0
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	4b9e      	ldr	r3, [pc, #632]	; (80013e0 <HAL_ETH_Init+0x2c0>)
 8001166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001168:	4a9d      	ldr	r2, [pc, #628]	; (80013e0 <HAL_ETH_Init+0x2c0>)
 800116a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116e:	6453      	str	r3, [r2, #68]	; 0x44
 8001170:	4b9b      	ldr	r3, [pc, #620]	; (80013e0 <HAL_ETH_Init+0x2c0>)
 8001172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001174:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800117c:	4b99      	ldr	r3, [pc, #612]	; (80013e4 <HAL_ETH_Init+0x2c4>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	4a98      	ldr	r2, [pc, #608]	; (80013e4 <HAL_ETH_Init+0x2c4>)
 8001182:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001186:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001188:	4b96      	ldr	r3, [pc, #600]	; (80013e4 <HAL_ETH_Init+0x2c4>)
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a1b      	ldr	r3, [r3, #32]
 8001190:	4994      	ldr	r1, [pc, #592]	; (80013e4 <HAL_ETH_Init+0x2c4>)
 8001192:	4313      	orrs	r3, r2
 8001194:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f042 0201 	orr.w	r2, r2, #1
 80011a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011ac:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80011ae:	f7ff fea1 	bl	8000ef4 <HAL_GetTick>
 80011b2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80011b4:	e011      	b.n	80011da <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80011b6:	f7ff fe9d 	bl	8000ef4 <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011c4:	d909      	bls.n	80011da <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2203      	movs	r2, #3
 80011ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e139      	b.n	800144e <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1e4      	bne.n	80011b6 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f023 031c 	bic.w	r3, r3, #28
 80011fa:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80011fc:	f001 fb38 	bl	8002870 <HAL_RCC_GetHCLKFreq>
 8001200:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	4a78      	ldr	r2, [pc, #480]	; (80013e8 <HAL_ETH_Init+0x2c8>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d908      	bls.n	800121c <HAL_ETH_Init+0xfc>
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	4a77      	ldr	r2, [pc, #476]	; (80013ec <HAL_ETH_Init+0x2cc>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d804      	bhi.n	800121c <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	f043 0308 	orr.w	r3, r3, #8
 8001218:	61fb      	str	r3, [r7, #28]
 800121a:	e027      	b.n	800126c <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	4a73      	ldr	r2, [pc, #460]	; (80013ec <HAL_ETH_Init+0x2cc>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d908      	bls.n	8001236 <HAL_ETH_Init+0x116>
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	4a6d      	ldr	r2, [pc, #436]	; (80013dc <HAL_ETH_Init+0x2bc>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d204      	bcs.n	8001236 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f043 030c 	orr.w	r3, r3, #12
 8001232:	61fb      	str	r3, [r7, #28]
 8001234:	e01a      	b.n	800126c <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	4a68      	ldr	r2, [pc, #416]	; (80013dc <HAL_ETH_Init+0x2bc>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d303      	bcc.n	8001246 <HAL_ETH_Init+0x126>
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	4a6b      	ldr	r2, [pc, #428]	; (80013f0 <HAL_ETH_Init+0x2d0>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d911      	bls.n	800126a <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	4a69      	ldr	r2, [pc, #420]	; (80013f0 <HAL_ETH_Init+0x2d0>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d908      	bls.n	8001260 <HAL_ETH_Init+0x140>
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	4a68      	ldr	r2, [pc, #416]	; (80013f4 <HAL_ETH_Init+0x2d4>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d804      	bhi.n	8001260 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	61fb      	str	r3, [r7, #28]
 800125e:	e005      	b.n	800126c <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f043 0310 	orr.w	r3, r3, #16
 8001266:	61fb      	str	r3, [r7, #28]
 8001268:	e000      	b.n	800126c <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800126a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	69fa      	ldr	r2, [r7, #28]
 8001272:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001274:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001278:	2100      	movs	r1, #0
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f000 f954 	bl	8001528 <HAL_ETH_WritePHYRegister>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d00b      	beq.n	800129e <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800128a:	6939      	ldr	r1, [r7, #16]
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f000 f9b1 	bl	80015f4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2201      	movs	r2, #1
 8001296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e0d7      	b.n	800144e <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800129e:	20ff      	movs	r0, #255	; 0xff
 80012a0:	f7ff fe34 	bl	8000f0c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f000 80a5 	beq.w	80013f8 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80012ae:	f7ff fe21 	bl	8000ef4 <HAL_GetTick>
 80012b2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80012b4:	f107 030c 	add.w	r3, r7, #12
 80012b8:	461a      	mov	r2, r3
 80012ba:	2101      	movs	r1, #1
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 f8cb 	bl	8001458 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80012c2:	f7ff fe17 	bl	8000ef4 <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d90f      	bls.n	80012f4 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80012d8:	6939      	ldr	r1, [r7, #16]
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f000 f98a 	bl	80015f4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2201      	movs	r2, #1
 80012e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e0ac      	b.n	800144e <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f003 0304 	and.w	r3, r3, #4
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d0da      	beq.n	80012b4 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80012fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001302:	2100      	movs	r1, #0
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f000 f90f 	bl	8001528 <HAL_ETH_WritePHYRegister>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d00b      	beq.n	8001328 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001314:	6939      	ldr	r1, [r7, #16]
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f000 f96c 	bl	80015f4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2201      	movs	r2, #1
 8001320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001324:	2301      	movs	r3, #1
 8001326:	e092      	b.n	800144e <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001328:	f7ff fde4 	bl	8000ef4 <HAL_GetTick>
 800132c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800132e:	f107 030c 	add.w	r3, r7, #12
 8001332:	461a      	mov	r2, r3
 8001334:	2101      	movs	r1, #1
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f000 f88e 	bl	8001458 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800133c:	f7ff fdda 	bl	8000ef4 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	f241 3288 	movw	r2, #5000	; 0x1388
 800134a:	4293      	cmp	r3, r2
 800134c:	d90f      	bls.n	800136e <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001352:	6939      	ldr	r1, [r7, #16]
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f000 f94d 	bl	80015f4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2201      	movs	r2, #1
 800135e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e06f      	b.n	800144e <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f003 0320 	and.w	r3, r3, #32
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0da      	beq.n	800132e <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001378:	f107 030c 	add.w	r3, r7, #12
 800137c:	461a      	mov	r2, r3
 800137e:	2110      	movs	r1, #16
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f000 f869 	bl	8001458 <HAL_ETH_ReadPHYRegister>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d00b      	beq.n	80013a4 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001390:	6939      	ldr	r1, [r7, #16]
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 f92e 	bl	80015f4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2201      	movs	r2, #1
 800139c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80013a0:	2301      	movs	r3, #1
 80013a2:	e054      	b.n	800144e <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f003 0304 	and.w	r3, r3, #4
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d004      	beq.n	80013b8 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	e002      	b.n	80013be <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	e035      	b.n	800143c <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	e030      	b.n	800143c <HAL_ETH_Init+0x31c>
 80013da:	bf00      	nop
 80013dc:	03938700 	.word	0x03938700
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40013800 	.word	0x40013800
 80013e8:	01312cff 	.word	0x01312cff
 80013ec:	02160ebf 	.word	0x02160ebf
 80013f0:	05f5e0ff 	.word	0x05f5e0ff
 80013f4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	08db      	lsrs	r3, r3, #3
 80013fe:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	085b      	lsrs	r3, r3, #1
 8001406:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001408:	4313      	orrs	r3, r2
 800140a:	b29b      	uxth	r3, r3
 800140c:	461a      	mov	r2, r3
 800140e:	2100      	movs	r1, #0
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f000 f889 	bl	8001528 <HAL_ETH_WritePHYRegister>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d00b      	beq.n	8001434 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001420:	6939      	ldr	r1, [r7, #16]
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f000 f8e6 	bl	80015f4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2201      	movs	r2, #1
 800142c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e00c      	b.n	800144e <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001434:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001438:	f7ff fd68 	bl	8000f0c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800143c:	6939      	ldr	r1, [r7, #16]
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 f8d8 	bl	80015f4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2201      	movs	r2, #1
 8001448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3720      	adds	r7, #32
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop

08001458 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	460b      	mov	r3, r1
 8001462:	607a      	str	r2, [r7, #4]
 8001464:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b82      	cmp	r3, #130	; 0x82
 8001478:	d101      	bne.n	800147e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800147a:	2302      	movs	r3, #2
 800147c:	e050      	b.n	8001520 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2282      	movs	r2, #130	; 0x82
 8001482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	691b      	ldr	r3, [r3, #16]
 800148c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	f003 031c 	and.w	r3, r3, #28
 8001494:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	8a1b      	ldrh	r3, [r3, #16]
 800149a:	02db      	lsls	r3, r3, #11
 800149c:	b29b      	uxth	r3, r3
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80014a4:	897b      	ldrh	r3, [r7, #10]
 80014a6:	019b      	lsls	r3, r3, #6
 80014a8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80014ac:	697a      	ldr	r2, [r7, #20]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	f023 0302 	bic.w	r3, r3, #2
 80014b8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80014ca:	f7ff fd13 	bl	8000ef4 <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80014d0:	e015      	b.n	80014fe <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80014d2:	f7ff fd0f 	bl	8000ef4 <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014e0:	d309      	bcc.n	80014f6 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2201      	movs	r2, #1
 80014e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e014      	b.n	8001520 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	691b      	ldr	r3, [r3, #16]
 80014fc:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1e4      	bne.n	80014d2 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	b29b      	uxth	r3, r3
 8001510:	461a      	mov	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2201      	movs	r2, #1
 800151a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	460b      	mov	r3, r1
 8001532:	607a      	str	r2, [r7, #4]
 8001534:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b42      	cmp	r3, #66	; 0x42
 8001548:	d101      	bne.n	800154e <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800154a:	2302      	movs	r3, #2
 800154c:	e04e      	b.n	80015ec <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2242      	movs	r2, #66	; 0x42
 8001552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	f003 031c 	and.w	r3, r3, #28
 8001564:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	8a1b      	ldrh	r3, [r3, #16]
 800156a:	02db      	lsls	r3, r3, #11
 800156c:	b29b      	uxth	r3, r3
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	4313      	orrs	r3, r2
 8001572:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001574:	897b      	ldrh	r3, [r7, #10]
 8001576:	019b      	lsls	r3, r3, #6
 8001578:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800157c:	697a      	ldr	r2, [r7, #20]
 800157e:	4313      	orrs	r3, r2
 8001580:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	f043 0302 	orr.w	r3, r3, #2
 8001588:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	b29a      	uxth	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80015a4:	f7ff fca6 	bl	8000ef4 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80015aa:	e015      	b.n	80015d8 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80015ac:	f7ff fca2 	bl	8000ef4 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ba:	d309      	bcc.n	80015d0 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e00d      	b.n	80015ec <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1e4      	bne.n	80015ac <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2201      	movs	r2, #1
 80015e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b0b0      	sub	sp, #192	; 0xc0
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80015fe:	2300      	movs	r3, #0
 8001600:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d007      	beq.n	800161a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001610:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001618:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800161a:	2300      	movs	r3, #0
 800161c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800161e:	2300      	movs	r3, #0
 8001620:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001622:	2300      	movs	r3, #0
 8001624:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001626:	2300      	movs	r3, #0
 8001628:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800162a:	2300      	movs	r3, #0
 800162c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800162e:	2300      	movs	r3, #0
 8001630:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d103      	bne.n	8001642 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800163a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800163e:	663b      	str	r3, [r7, #96]	; 0x60
 8001640:	e001      	b.n	8001646 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001642:	2300      	movs	r3, #0
 8001644:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001646:	f44f 7300 	mov.w	r3, #512	; 0x200
 800164a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800164c:	2300      	movs	r3, #0
 800164e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001650:	2300      	movs	r3, #0
 8001652:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001654:	2300      	movs	r3, #0
 8001656:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800165c:	2300      	movs	r3, #0
 800165e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001660:	2340      	movs	r3, #64	; 0x40
 8001662:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001664:	2300      	movs	r3, #0
 8001666:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800166a:	2300      	movs	r3, #0
 800166c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001670:	2300      	movs	r3, #0
 8001672:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001676:	2300      	movs	r3, #0
 8001678:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800167c:	2300      	movs	r3, #0
 800167e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001682:	2300      	movs	r3, #0
 8001684:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001688:	2300      	movs	r3, #0
 800168a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800168e:	2300      	movs	r3, #0
 8001690:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001694:	2380      	movs	r3, #128	; 0x80
 8001696:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800169a:	2300      	movs	r3, #0
 800169c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80016b2:	2300      	movs	r3, #0
 80016b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80016b8:	2300      	movs	r3, #0
 80016ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80016c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80016cc:	4bac      	ldr	r3, [pc, #688]	; (8001980 <ETH_MACDMAConfig+0x38c>)
 80016ce:	4013      	ands	r3, r2
 80016d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80016d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80016d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80016d8:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80016da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80016dc:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80016de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80016e0:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80016e6:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80016e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80016ea:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80016ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80016ee:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80016f4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80016f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80016f8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80016fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80016fc:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80016fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001700:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001704:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001706:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001708:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800170a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800170e:	4313      	orrs	r3, r2
 8001710:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800171c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001728:	2001      	movs	r0, #1
 800172a:	f7ff fbef 	bl	8000f0c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001736:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001738:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800173a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800173c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800173e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001740:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001742:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001746:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001748:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800174c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800174e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001752:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001754:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001758:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800175c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001764:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001766:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001772:	2001      	movs	r0, #1
 8001774:	f7ff fbca 	bl	8000f0c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001780:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800178a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001794:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80017a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017a4:	f64f 7341 	movw	r3, #65345	; 0xff41
 80017a8:	4013      	ands	r3, r2
 80017aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80017ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80017b2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80017b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80017b8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80017ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80017be:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80017c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80017c4:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80017c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80017ca:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80017cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80017d0:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80017d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017d6:	4313      	orrs	r3, r2
 80017d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017e4:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80017f0:	2001      	movs	r0, #1
 80017f2:	f7ff fb8b 	bl	8000f0c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017fe:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001800:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001804:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	430a      	orrs	r2, r1
 800180e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800181a:	2001      	movs	r0, #1
 800181c:	f7ff fb76 	bl	8000f0c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001828:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800182a:	2300      	movs	r3, #0
 800182c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800182e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001832:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001834:	2300      	movs	r3, #0
 8001836:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001838:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800183c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800183e:	2300      	movs	r3, #0
 8001840:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001846:	2300      	movs	r3, #0
 8001848:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800184a:	2300      	movs	r3, #0
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800184e:	2304      	movs	r3, #4
 8001850:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001852:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001856:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001858:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800185c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800185e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001862:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001864:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001868:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800186a:	2380      	movs	r3, #128	; 0x80
 800186c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800186e:	2300      	movs	r3, #0
 8001870:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001872:	2300      	movs	r3, #0
 8001874:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800187e:	3318      	adds	r3, #24
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001886:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800188a:	4b3e      	ldr	r3, [pc, #248]	; (8001984 <ETH_MACDMAConfig+0x390>)
 800188c:	4013      	ands	r3, r2
 800188e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001892:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001894:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001896:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001898:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800189a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800189c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800189e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80018a0:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80018a2:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80018a4:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80018a6:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80018a8:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80018aa:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80018ae:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80018b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80018b2:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80018b4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80018b8:	4313      	orrs	r3, r2
 80018ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018c6:	3318      	adds	r3, #24
 80018c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80018cc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018d6:	3318      	adds	r3, #24
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80018de:	2001      	movs	r0, #1
 80018e0:	f7ff fb14 	bl	8000f0c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ec:	3318      	adds	r3, #24
 80018ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80018f2:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80018f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80018f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80018f8:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80018fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80018fc:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80018fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001900:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001904:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001906:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001908:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800190a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800190c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800190e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800191c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800192c:	2001      	movs	r0, #1
 800192e:	f7ff faed 	bl	8000f0c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800193a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800193e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d10f      	bne.n	8001968 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001950:	331c      	adds	r3, #28
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800195c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001964:	331c      	adds	r3, #28
 8001966:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	461a      	mov	r2, r3
 800196e:	2100      	movs	r1, #0
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 f809 	bl	8001988 <ETH_MACAddressConfig>
}
 8001976:	bf00      	nop
 8001978:	37c0      	adds	r7, #192	; 0xc0
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	ff20810f 	.word	0xff20810f
 8001984:	f8de3f23 	.word	0xf8de3f23

08001988 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001988:	b480      	push	{r7}
 800198a:	b087      	sub	sp, #28
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3305      	adds	r3, #5
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	021b      	lsls	r3, r3, #8
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	3204      	adds	r2, #4
 80019a0:	7812      	ldrb	r2, [r2, #0]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <ETH_MACAddressConfig+0x68>)
 80019aa:	4413      	add	r3, r2
 80019ac:	461a      	mov	r2, r3
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	3303      	adds	r3, #3
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	061a      	lsls	r2, r3, #24
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3302      	adds	r3, #2
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	041b      	lsls	r3, r3, #16
 80019c2:	431a      	orrs	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3301      	adds	r3, #1
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	021b      	lsls	r3, r3, #8
 80019cc:	4313      	orrs	r3, r2
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	7812      	ldrb	r2, [r2, #0]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <ETH_MACAddressConfig+0x6c>)
 80019da:	4413      	add	r3, r2
 80019dc:	461a      	mov	r2, r3
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	6013      	str	r3, [r2, #0]
}
 80019e2:	bf00      	nop
 80019e4:	371c      	adds	r7, #28
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40028040 	.word	0x40028040
 80019f4:	40028044 	.word	0x40028044

080019f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b089      	sub	sp, #36	; 0x24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
 8001a12:	e177      	b.n	8001d04 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a14:	2201      	movs	r2, #1
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	4013      	ands	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	f040 8166 	bne.w	8001cfe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d005      	beq.n	8001a4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d130      	bne.n	8001aac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	2203      	movs	r2, #3
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	68da      	ldr	r2, [r3, #12]
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a80:	2201      	movs	r2, #1
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	091b      	lsrs	r3, r3, #4
 8001a96:	f003 0201 	and.w	r2, r3, #1
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	d017      	beq.n	8001ae8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	2203      	movs	r2, #3
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d123      	bne.n	8001b3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	08da      	lsrs	r2, r3, #3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3208      	adds	r2, #8
 8001afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	220f      	movs	r2, #15
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	691a      	ldr	r2, [r3, #16]
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	08da      	lsrs	r2, r3, #3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3208      	adds	r2, #8
 8001b36:	69b9      	ldr	r1, [r7, #24]
 8001b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	2203      	movs	r2, #3
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 0203 	and.w	r2, r3, #3
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f000 80c0 	beq.w	8001cfe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	4b66      	ldr	r3, [pc, #408]	; (8001d1c <HAL_GPIO_Init+0x324>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	4a65      	ldr	r2, [pc, #404]	; (8001d1c <HAL_GPIO_Init+0x324>)
 8001b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b8e:	4b63      	ldr	r3, [pc, #396]	; (8001d1c <HAL_GPIO_Init+0x324>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b9a:	4a61      	ldr	r2, [pc, #388]	; (8001d20 <HAL_GPIO_Init+0x328>)
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	089b      	lsrs	r3, r3, #2
 8001ba0:	3302      	adds	r3, #2
 8001ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f003 0303 	and.w	r3, r3, #3
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	220f      	movs	r2, #15
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a58      	ldr	r2, [pc, #352]	; (8001d24 <HAL_GPIO_Init+0x32c>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d037      	beq.n	8001c36 <HAL_GPIO_Init+0x23e>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a57      	ldr	r2, [pc, #348]	; (8001d28 <HAL_GPIO_Init+0x330>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d031      	beq.n	8001c32 <HAL_GPIO_Init+0x23a>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a56      	ldr	r2, [pc, #344]	; (8001d2c <HAL_GPIO_Init+0x334>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d02b      	beq.n	8001c2e <HAL_GPIO_Init+0x236>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a55      	ldr	r2, [pc, #340]	; (8001d30 <HAL_GPIO_Init+0x338>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d025      	beq.n	8001c2a <HAL_GPIO_Init+0x232>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a54      	ldr	r2, [pc, #336]	; (8001d34 <HAL_GPIO_Init+0x33c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d01f      	beq.n	8001c26 <HAL_GPIO_Init+0x22e>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a53      	ldr	r2, [pc, #332]	; (8001d38 <HAL_GPIO_Init+0x340>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d019      	beq.n	8001c22 <HAL_GPIO_Init+0x22a>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a52      	ldr	r2, [pc, #328]	; (8001d3c <HAL_GPIO_Init+0x344>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d013      	beq.n	8001c1e <HAL_GPIO_Init+0x226>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a51      	ldr	r2, [pc, #324]	; (8001d40 <HAL_GPIO_Init+0x348>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d00d      	beq.n	8001c1a <HAL_GPIO_Init+0x222>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a50      	ldr	r2, [pc, #320]	; (8001d44 <HAL_GPIO_Init+0x34c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d007      	beq.n	8001c16 <HAL_GPIO_Init+0x21e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a4f      	ldr	r2, [pc, #316]	; (8001d48 <HAL_GPIO_Init+0x350>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d101      	bne.n	8001c12 <HAL_GPIO_Init+0x21a>
 8001c0e:	2309      	movs	r3, #9
 8001c10:	e012      	b.n	8001c38 <HAL_GPIO_Init+0x240>
 8001c12:	230a      	movs	r3, #10
 8001c14:	e010      	b.n	8001c38 <HAL_GPIO_Init+0x240>
 8001c16:	2308      	movs	r3, #8
 8001c18:	e00e      	b.n	8001c38 <HAL_GPIO_Init+0x240>
 8001c1a:	2307      	movs	r3, #7
 8001c1c:	e00c      	b.n	8001c38 <HAL_GPIO_Init+0x240>
 8001c1e:	2306      	movs	r3, #6
 8001c20:	e00a      	b.n	8001c38 <HAL_GPIO_Init+0x240>
 8001c22:	2305      	movs	r3, #5
 8001c24:	e008      	b.n	8001c38 <HAL_GPIO_Init+0x240>
 8001c26:	2304      	movs	r3, #4
 8001c28:	e006      	b.n	8001c38 <HAL_GPIO_Init+0x240>
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e004      	b.n	8001c38 <HAL_GPIO_Init+0x240>
 8001c2e:	2302      	movs	r3, #2
 8001c30:	e002      	b.n	8001c38 <HAL_GPIO_Init+0x240>
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <HAL_GPIO_Init+0x240>
 8001c36:	2300      	movs	r3, #0
 8001c38:	69fa      	ldr	r2, [r7, #28]
 8001c3a:	f002 0203 	and.w	r2, r2, #3
 8001c3e:	0092      	lsls	r2, r2, #2
 8001c40:	4093      	lsls	r3, r2
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c48:	4935      	ldr	r1, [pc, #212]	; (8001d20 <HAL_GPIO_Init+0x328>)
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	089b      	lsrs	r3, r3, #2
 8001c4e:	3302      	adds	r3, #2
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c56:	4b3d      	ldr	r3, [pc, #244]	; (8001d4c <HAL_GPIO_Init+0x354>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4013      	ands	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c7a:	4a34      	ldr	r2, [pc, #208]	; (8001d4c <HAL_GPIO_Init+0x354>)
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c80:	4b32      	ldr	r3, [pc, #200]	; (8001d4c <HAL_GPIO_Init+0x354>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ca4:	4a29      	ldr	r2, [pc, #164]	; (8001d4c <HAL_GPIO_Init+0x354>)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001caa:	4b28      	ldr	r3, [pc, #160]	; (8001d4c <HAL_GPIO_Init+0x354>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cce:	4a1f      	ldr	r2, [pc, #124]	; (8001d4c <HAL_GPIO_Init+0x354>)
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cd4:	4b1d      	ldr	r3, [pc, #116]	; (8001d4c <HAL_GPIO_Init+0x354>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cf8:	4a14      	ldr	r2, [pc, #80]	; (8001d4c <HAL_GPIO_Init+0x354>)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	3301      	adds	r3, #1
 8001d02:	61fb      	str	r3, [r7, #28]
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	2b0f      	cmp	r3, #15
 8001d08:	f67f ae84 	bls.w	8001a14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d0c:	bf00      	nop
 8001d0e:	bf00      	nop
 8001d10:	3724      	adds	r7, #36	; 0x24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	40013800 	.word	0x40013800
 8001d24:	40020000 	.word	0x40020000
 8001d28:	40020400 	.word	0x40020400
 8001d2c:	40020800 	.word	0x40020800
 8001d30:	40020c00 	.word	0x40020c00
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40021400 	.word	0x40021400
 8001d3c:	40021800 	.word	0x40021800
 8001d40:	40021c00 	.word	0x40021c00
 8001d44:	40022000 	.word	0x40022000
 8001d48:	40022400 	.word	0x40022400
 8001d4c:	40013c00 	.word	0x40013c00

08001d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	807b      	strh	r3, [r7, #2]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d60:	787b      	ldrb	r3, [r7, #1]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d66:	887a      	ldrh	r2, [r7, #2]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d6c:	e003      	b.n	8001d76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d6e:	887b      	ldrh	r3, [r7, #2]
 8001d70:	041a      	lsls	r2, r3, #16
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	619a      	str	r2, [r3, #24]
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b085      	sub	sp, #20
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d94:	887a      	ldrh	r2, [r7, #2]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	041a      	lsls	r2, r3, #16
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	43d9      	mvns	r1, r3
 8001da0:	887b      	ldrh	r3, [r7, #2]
 8001da2:	400b      	ands	r3, r1
 8001da4:	431a      	orrs	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	619a      	str	r2, [r3, #24]
}
 8001daa:	bf00      	nop
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001db6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db8:	b08f      	sub	sp, #60	; 0x3c
 8001dba:	af0a      	add	r7, sp, #40	; 0x28
 8001dbc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e10f      	b.n	8001fe8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d106      	bne.n	8001de8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7fe ff60 	bl	8000ca8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2203      	movs	r2, #3
 8001dec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d102      	bne.n	8001e02 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f001 f97f 	bl	800310a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	603b      	str	r3, [r7, #0]
 8001e12:	687e      	ldr	r6, [r7, #4]
 8001e14:	466d      	mov	r5, sp
 8001e16:	f106 0410 	add.w	r4, r6, #16
 8001e1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e22:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e26:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e2a:	1d33      	adds	r3, r6, #4
 8001e2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e2e:	6838      	ldr	r0, [r7, #0]
 8001e30:	f001 f90a 	bl	8003048 <USB_CoreInit>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d005      	beq.n	8001e46 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e0d0      	b.n	8001fe8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f001 f96d 	bl	800312c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e52:	2300      	movs	r3, #0
 8001e54:	73fb      	strb	r3, [r7, #15]
 8001e56:	e04a      	b.n	8001eee <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e58:	7bfa      	ldrb	r2, [r7, #15]
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	1a9b      	subs	r3, r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	333d      	adds	r3, #61	; 0x3d
 8001e68:	2201      	movs	r2, #1
 8001e6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e6c:	7bfa      	ldrb	r2, [r7, #15]
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	4613      	mov	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	1a9b      	subs	r3, r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	440b      	add	r3, r1
 8001e7a:	333c      	adds	r3, #60	; 0x3c
 8001e7c:	7bfa      	ldrb	r2, [r7, #15]
 8001e7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e80:	7bfa      	ldrb	r2, [r7, #15]
 8001e82:	7bfb      	ldrb	r3, [r7, #15]
 8001e84:	b298      	uxth	r0, r3
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	1a9b      	subs	r3, r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	440b      	add	r3, r1
 8001e92:	3342      	adds	r3, #66	; 0x42
 8001e94:	4602      	mov	r2, r0
 8001e96:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e98:	7bfa      	ldrb	r2, [r7, #15]
 8001e9a:	6879      	ldr	r1, [r7, #4]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	1a9b      	subs	r3, r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	333f      	adds	r3, #63	; 0x3f
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001eac:	7bfa      	ldrb	r2, [r7, #15]
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	1a9b      	subs	r3, r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	3344      	adds	r3, #68	; 0x44
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ec0:	7bfa      	ldrb	r2, [r7, #15]
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	1a9b      	subs	r3, r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	440b      	add	r3, r1
 8001ece:	3348      	adds	r3, #72	; 0x48
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ed4:	7bfa      	ldrb	r2, [r7, #15]
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	1a9b      	subs	r3, r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	3350      	adds	r3, #80	; 0x50
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
 8001eea:	3301      	adds	r3, #1
 8001eec:	73fb      	strb	r3, [r7, #15]
 8001eee:	7bfa      	ldrb	r2, [r7, #15]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d3af      	bcc.n	8001e58 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ef8:	2300      	movs	r3, #0
 8001efa:	73fb      	strb	r3, [r7, #15]
 8001efc:	e044      	b.n	8001f88 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001efe:	7bfa      	ldrb	r2, [r7, #15]
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	1a9b      	subs	r3, r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001f10:	2200      	movs	r2, #0
 8001f12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f14:	7bfa      	ldrb	r2, [r7, #15]
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	1a9b      	subs	r3, r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	440b      	add	r3, r1
 8001f22:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001f26:	7bfa      	ldrb	r2, [r7, #15]
 8001f28:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f2a:	7bfa      	ldrb	r2, [r7, #15]
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	1a9b      	subs	r3, r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	440b      	add	r3, r1
 8001f38:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f40:	7bfa      	ldrb	r2, [r7, #15]
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	4613      	mov	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	1a9b      	subs	r3, r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f56:	7bfa      	ldrb	r2, [r7, #15]
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	1a9b      	subs	r3, r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	440b      	add	r3, r1
 8001f64:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f6c:	7bfa      	ldrb	r2, [r7, #15]
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	1a9b      	subs	r3, r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
 8001f84:	3301      	adds	r3, #1
 8001f86:	73fb      	strb	r3, [r7, #15]
 8001f88:	7bfa      	ldrb	r2, [r7, #15]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d3b5      	bcc.n	8001efe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	603b      	str	r3, [r7, #0]
 8001f98:	687e      	ldr	r6, [r7, #4]
 8001f9a:	466d      	mov	r5, sp
 8001f9c:	f106 0410 	add.w	r4, r6, #16
 8001fa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fa8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fac:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fb0:	1d33      	adds	r3, r6, #4
 8001fb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fb4:	6838      	ldr	r0, [r7, #0]
 8001fb6:	f001 f905 	bl	80031c4 <USB_DevInit>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d005      	beq.n	8001fcc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e00d      	b.n	8001fe8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f001 fab0 	bl	8003546 <USB_DevDisconnect>

  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ff0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e264      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d075      	beq.n	80020fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800200e:	4ba3      	ldr	r3, [pc, #652]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 030c 	and.w	r3, r3, #12
 8002016:	2b04      	cmp	r3, #4
 8002018:	d00c      	beq.n	8002034 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800201a:	4ba0      	ldr	r3, [pc, #640]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002022:	2b08      	cmp	r3, #8
 8002024:	d112      	bne.n	800204c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002026:	4b9d      	ldr	r3, [pc, #628]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800202e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002032:	d10b      	bne.n	800204c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002034:	4b99      	ldr	r3, [pc, #612]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d05b      	beq.n	80020f8 <HAL_RCC_OscConfig+0x108>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d157      	bne.n	80020f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e23f      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002054:	d106      	bne.n	8002064 <HAL_RCC_OscConfig+0x74>
 8002056:	4b91      	ldr	r3, [pc, #580]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a90      	ldr	r2, [pc, #576]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 800205c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	e01d      	b.n	80020a0 <HAL_RCC_OscConfig+0xb0>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800206c:	d10c      	bne.n	8002088 <HAL_RCC_OscConfig+0x98>
 800206e:	4b8b      	ldr	r3, [pc, #556]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a8a      	ldr	r2, [pc, #552]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	4b88      	ldr	r3, [pc, #544]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a87      	ldr	r2, [pc, #540]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002084:	6013      	str	r3, [r2, #0]
 8002086:	e00b      	b.n	80020a0 <HAL_RCC_OscConfig+0xb0>
 8002088:	4b84      	ldr	r3, [pc, #528]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a83      	ldr	r2, [pc, #524]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 800208e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002092:	6013      	str	r3, [r2, #0]
 8002094:	4b81      	ldr	r3, [pc, #516]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a80      	ldr	r2, [pc, #512]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 800209a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800209e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d013      	beq.n	80020d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a8:	f7fe ff24 	bl	8000ef4 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020b0:	f7fe ff20 	bl	8000ef4 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b64      	cmp	r3, #100	; 0x64
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e204      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c2:	4b76      	ldr	r3, [pc, #472]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0f0      	beq.n	80020b0 <HAL_RCC_OscConfig+0xc0>
 80020ce:	e014      	b.n	80020fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d0:	f7fe ff10 	bl	8000ef4 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020d8:	f7fe ff0c 	bl	8000ef4 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b64      	cmp	r3, #100	; 0x64
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e1f0      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ea:	4b6c      	ldr	r3, [pc, #432]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0xe8>
 80020f6:	e000      	b.n	80020fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d063      	beq.n	80021ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002106:	4b65      	ldr	r3, [pc, #404]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 030c 	and.w	r3, r3, #12
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00b      	beq.n	800212a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002112:	4b62      	ldr	r3, [pc, #392]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800211a:	2b08      	cmp	r3, #8
 800211c:	d11c      	bne.n	8002158 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800211e:	4b5f      	ldr	r3, [pc, #380]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d116      	bne.n	8002158 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800212a:	4b5c      	ldr	r3, [pc, #368]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d005      	beq.n	8002142 <HAL_RCC_OscConfig+0x152>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d001      	beq.n	8002142 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e1c4      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002142:	4b56      	ldr	r3, [pc, #344]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	4952      	ldr	r1, [pc, #328]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002152:	4313      	orrs	r3, r2
 8002154:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002156:	e03a      	b.n	80021ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d020      	beq.n	80021a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002160:	4b4f      	ldr	r3, [pc, #316]	; (80022a0 <HAL_RCC_OscConfig+0x2b0>)
 8002162:	2201      	movs	r2, #1
 8002164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002166:	f7fe fec5 	bl	8000ef4 <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800216e:	f7fe fec1 	bl	8000ef4 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e1a5      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002180:	4b46      	ldr	r3, [pc, #280]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0f0      	beq.n	800216e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218c:	4b43      	ldr	r3, [pc, #268]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	4940      	ldr	r1, [pc, #256]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 800219c:	4313      	orrs	r3, r2
 800219e:	600b      	str	r3, [r1, #0]
 80021a0:	e015      	b.n	80021ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021a2:	4b3f      	ldr	r3, [pc, #252]	; (80022a0 <HAL_RCC_OscConfig+0x2b0>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a8:	f7fe fea4 	bl	8000ef4 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021b0:	f7fe fea0 	bl	8000ef4 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e184      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021c2:	4b36      	ldr	r3, [pc, #216]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d030      	beq.n	800223c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d016      	beq.n	8002210 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021e2:	4b30      	ldr	r3, [pc, #192]	; (80022a4 <HAL_RCC_OscConfig+0x2b4>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e8:	f7fe fe84 	bl	8000ef4 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021f0:	f7fe fe80 	bl	8000ef4 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e164      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002202:	4b26      	ldr	r3, [pc, #152]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0f0      	beq.n	80021f0 <HAL_RCC_OscConfig+0x200>
 800220e:	e015      	b.n	800223c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002210:	4b24      	ldr	r3, [pc, #144]	; (80022a4 <HAL_RCC_OscConfig+0x2b4>)
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002216:	f7fe fe6d 	bl	8000ef4 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800221e:	f7fe fe69 	bl	8000ef4 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e14d      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002230:	4b1a      	ldr	r3, [pc, #104]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1f0      	bne.n	800221e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 80a0 	beq.w	800238a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800224a:	2300      	movs	r3, #0
 800224c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800224e:	4b13      	ldr	r3, [pc, #76]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10f      	bne.n	800227a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	60bb      	str	r3, [r7, #8]
 800225e:	4b0f      	ldr	r3, [pc, #60]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	4a0e      	ldr	r2, [pc, #56]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 8002264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002268:	6413      	str	r3, [r2, #64]	; 0x40
 800226a:	4b0c      	ldr	r3, [pc, #48]	; (800229c <HAL_RCC_OscConfig+0x2ac>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002272:	60bb      	str	r3, [r7, #8]
 8002274:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002276:	2301      	movs	r3, #1
 8002278:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800227a:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <HAL_RCC_OscConfig+0x2b8>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002282:	2b00      	cmp	r3, #0
 8002284:	d121      	bne.n	80022ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002286:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <HAL_RCC_OscConfig+0x2b8>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a07      	ldr	r2, [pc, #28]	; (80022a8 <HAL_RCC_OscConfig+0x2b8>)
 800228c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002290:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002292:	f7fe fe2f 	bl	8000ef4 <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002298:	e011      	b.n	80022be <HAL_RCC_OscConfig+0x2ce>
 800229a:	bf00      	nop
 800229c:	40023800 	.word	0x40023800
 80022a0:	42470000 	.word	0x42470000
 80022a4:	42470e80 	.word	0x42470e80
 80022a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ac:	f7fe fe22 	bl	8000ef4 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e106      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022be:	4b85      	ldr	r3, [pc, #532]	; (80024d4 <HAL_RCC_OscConfig+0x4e4>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0f0      	beq.n	80022ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d106      	bne.n	80022e0 <HAL_RCC_OscConfig+0x2f0>
 80022d2:	4b81      	ldr	r3, [pc, #516]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 80022d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d6:	4a80      	ldr	r2, [pc, #512]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	6713      	str	r3, [r2, #112]	; 0x70
 80022de:	e01c      	b.n	800231a <HAL_RCC_OscConfig+0x32a>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	2b05      	cmp	r3, #5
 80022e6:	d10c      	bne.n	8002302 <HAL_RCC_OscConfig+0x312>
 80022e8:	4b7b      	ldr	r3, [pc, #492]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 80022ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ec:	4a7a      	ldr	r2, [pc, #488]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 80022ee:	f043 0304 	orr.w	r3, r3, #4
 80022f2:	6713      	str	r3, [r2, #112]	; 0x70
 80022f4:	4b78      	ldr	r3, [pc, #480]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 80022f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f8:	4a77      	ldr	r2, [pc, #476]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002300:	e00b      	b.n	800231a <HAL_RCC_OscConfig+0x32a>
 8002302:	4b75      	ldr	r3, [pc, #468]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 8002304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002306:	4a74      	ldr	r2, [pc, #464]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 8002308:	f023 0301 	bic.w	r3, r3, #1
 800230c:	6713      	str	r3, [r2, #112]	; 0x70
 800230e:	4b72      	ldr	r3, [pc, #456]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 8002310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002312:	4a71      	ldr	r2, [pc, #452]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 8002314:	f023 0304 	bic.w	r3, r3, #4
 8002318:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d015      	beq.n	800234e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002322:	f7fe fde7 	bl	8000ef4 <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002328:	e00a      	b.n	8002340 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800232a:	f7fe fde3 	bl	8000ef4 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	f241 3288 	movw	r2, #5000	; 0x1388
 8002338:	4293      	cmp	r3, r2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e0c5      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002340:	4b65      	ldr	r3, [pc, #404]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 8002342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0ee      	beq.n	800232a <HAL_RCC_OscConfig+0x33a>
 800234c:	e014      	b.n	8002378 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800234e:	f7fe fdd1 	bl	8000ef4 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002354:	e00a      	b.n	800236c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002356:	f7fe fdcd 	bl	8000ef4 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	f241 3288 	movw	r2, #5000	; 0x1388
 8002364:	4293      	cmp	r3, r2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e0af      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800236c:	4b5a      	ldr	r3, [pc, #360]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 800236e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1ee      	bne.n	8002356 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002378:	7dfb      	ldrb	r3, [r7, #23]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d105      	bne.n	800238a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800237e:	4b56      	ldr	r3, [pc, #344]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	4a55      	ldr	r2, [pc, #340]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 8002384:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002388:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 809b 	beq.w	80024ca <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002394:	4b50      	ldr	r3, [pc, #320]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f003 030c 	and.w	r3, r3, #12
 800239c:	2b08      	cmp	r3, #8
 800239e:	d05c      	beq.n	800245a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d141      	bne.n	800242c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a8:	4b4c      	ldr	r3, [pc, #304]	; (80024dc <HAL_RCC_OscConfig+0x4ec>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ae:	f7fe fda1 	bl	8000ef4 <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023b6:	f7fe fd9d 	bl	8000ef4 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e081      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c8:	4b43      	ldr	r3, [pc, #268]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1f0      	bne.n	80023b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	69da      	ldr	r2, [r3, #28]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	431a      	orrs	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	019b      	lsls	r3, r3, #6
 80023e4:	431a      	orrs	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ea:	085b      	lsrs	r3, r3, #1
 80023ec:	3b01      	subs	r3, #1
 80023ee:	041b      	lsls	r3, r3, #16
 80023f0:	431a      	orrs	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f6:	061b      	lsls	r3, r3, #24
 80023f8:	4937      	ldr	r1, [pc, #220]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023fe:	4b37      	ldr	r3, [pc, #220]	; (80024dc <HAL_RCC_OscConfig+0x4ec>)
 8002400:	2201      	movs	r2, #1
 8002402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002404:	f7fe fd76 	bl	8000ef4 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800240c:	f7fe fd72 	bl	8000ef4 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e056      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800241e:	4b2e      	ldr	r3, [pc, #184]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0f0      	beq.n	800240c <HAL_RCC_OscConfig+0x41c>
 800242a:	e04e      	b.n	80024ca <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800242c:	4b2b      	ldr	r3, [pc, #172]	; (80024dc <HAL_RCC_OscConfig+0x4ec>)
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002432:	f7fe fd5f 	bl	8000ef4 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800243a:	f7fe fd5b 	bl	8000ef4 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e03f      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800244c:	4b22      	ldr	r3, [pc, #136]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1f0      	bne.n	800243a <HAL_RCC_OscConfig+0x44a>
 8002458:	e037      	b.n	80024ca <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d101      	bne.n	8002466 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e032      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002466:	4b1c      	ldr	r3, [pc, #112]	; (80024d8 <HAL_RCC_OscConfig+0x4e8>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d028      	beq.n	80024c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800247e:	429a      	cmp	r2, r3
 8002480:	d121      	bne.n	80024c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800248c:	429a      	cmp	r2, r3
 800248e:	d11a      	bne.n	80024c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002496:	4013      	ands	r3, r2
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800249c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800249e:	4293      	cmp	r3, r2
 80024a0:	d111      	bne.n	80024c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ac:	085b      	lsrs	r3, r3, #1
 80024ae:	3b01      	subs	r3, #1
 80024b0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d107      	bne.n	80024c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d001      	beq.n	80024ca <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40007000 	.word	0x40007000
 80024d8:	40023800 	.word	0x40023800
 80024dc:	42470060 	.word	0x42470060

080024e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e0cc      	b.n	800268e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024f4:	4b68      	ldr	r3, [pc, #416]	; (8002698 <HAL_RCC_ClockConfig+0x1b8>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 030f 	and.w	r3, r3, #15
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d90c      	bls.n	800251c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002502:	4b65      	ldr	r3, [pc, #404]	; (8002698 <HAL_RCC_ClockConfig+0x1b8>)
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800250a:	4b63      	ldr	r3, [pc, #396]	; (8002698 <HAL_RCC_ClockConfig+0x1b8>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	429a      	cmp	r2, r3
 8002516:	d001      	beq.n	800251c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e0b8      	b.n	800268e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d020      	beq.n	800256a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b00      	cmp	r3, #0
 8002532:	d005      	beq.n	8002540 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002534:	4b59      	ldr	r3, [pc, #356]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	4a58      	ldr	r2, [pc, #352]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 800253a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800253e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0308 	and.w	r3, r3, #8
 8002548:	2b00      	cmp	r3, #0
 800254a:	d005      	beq.n	8002558 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800254c:	4b53      	ldr	r3, [pc, #332]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	4a52      	ldr	r2, [pc, #328]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 8002552:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002556:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002558:	4b50      	ldr	r3, [pc, #320]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	494d      	ldr	r1, [pc, #308]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 8002566:	4313      	orrs	r3, r2
 8002568:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d044      	beq.n	8002600 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d107      	bne.n	800258e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257e:	4b47      	ldr	r3, [pc, #284]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d119      	bne.n	80025be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e07f      	b.n	800268e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b02      	cmp	r3, #2
 8002594:	d003      	beq.n	800259e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800259a:	2b03      	cmp	r3, #3
 800259c:	d107      	bne.n	80025ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800259e:	4b3f      	ldr	r3, [pc, #252]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d109      	bne.n	80025be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e06f      	b.n	800268e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ae:	4b3b      	ldr	r3, [pc, #236]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e067      	b.n	800268e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025be:	4b37      	ldr	r3, [pc, #220]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f023 0203 	bic.w	r2, r3, #3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	4934      	ldr	r1, [pc, #208]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025d0:	f7fe fc90 	bl	8000ef4 <HAL_GetTick>
 80025d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d6:	e00a      	b.n	80025ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025d8:	f7fe fc8c 	bl	8000ef4 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e04f      	b.n	800268e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ee:	4b2b      	ldr	r3, [pc, #172]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 020c 	and.w	r2, r3, #12
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d1eb      	bne.n	80025d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002600:	4b25      	ldr	r3, [pc, #148]	; (8002698 <HAL_RCC_ClockConfig+0x1b8>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 030f 	and.w	r3, r3, #15
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d20c      	bcs.n	8002628 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260e:	4b22      	ldr	r3, [pc, #136]	; (8002698 <HAL_RCC_ClockConfig+0x1b8>)
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002616:	4b20      	ldr	r3, [pc, #128]	; (8002698 <HAL_RCC_ClockConfig+0x1b8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	429a      	cmp	r2, r3
 8002622:	d001      	beq.n	8002628 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e032      	b.n	800268e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b00      	cmp	r3, #0
 8002632:	d008      	beq.n	8002646 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002634:	4b19      	ldr	r3, [pc, #100]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	4916      	ldr	r1, [pc, #88]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 8002642:	4313      	orrs	r3, r2
 8002644:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	2b00      	cmp	r3, #0
 8002650:	d009      	beq.n	8002666 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002652:	4b12      	ldr	r3, [pc, #72]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	490e      	ldr	r1, [pc, #56]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 8002662:	4313      	orrs	r3, r2
 8002664:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002666:	f000 f821 	bl	80026ac <HAL_RCC_GetSysClockFreq>
 800266a:	4602      	mov	r2, r0
 800266c:	4b0b      	ldr	r3, [pc, #44]	; (800269c <HAL_RCC_ClockConfig+0x1bc>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	091b      	lsrs	r3, r3, #4
 8002672:	f003 030f 	and.w	r3, r3, #15
 8002676:	490a      	ldr	r1, [pc, #40]	; (80026a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002678:	5ccb      	ldrb	r3, [r1, r3]
 800267a:	fa22 f303 	lsr.w	r3, r2, r3
 800267e:	4a09      	ldr	r2, [pc, #36]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002680:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002682:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f7fe fbf0 	bl	8000e6c <HAL_InitTick>

  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40023c00 	.word	0x40023c00
 800269c:	40023800 	.word	0x40023800
 80026a0:	08003688 	.word	0x08003688
 80026a4:	20000000 	.word	0x20000000
 80026a8:	20000004 	.word	0x20000004

080026ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80026b0:	b084      	sub	sp, #16
 80026b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	607b      	str	r3, [r7, #4]
 80026b8:	2300      	movs	r3, #0
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	2300      	movs	r3, #0
 80026be:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80026c0:	2300      	movs	r3, #0
 80026c2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026c4:	4b67      	ldr	r3, [pc, #412]	; (8002864 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 030c 	and.w	r3, r3, #12
 80026cc:	2b08      	cmp	r3, #8
 80026ce:	d00d      	beq.n	80026ec <HAL_RCC_GetSysClockFreq+0x40>
 80026d0:	2b08      	cmp	r3, #8
 80026d2:	f200 80bd 	bhi.w	8002850 <HAL_RCC_GetSysClockFreq+0x1a4>
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d002      	beq.n	80026e0 <HAL_RCC_GetSysClockFreq+0x34>
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d003      	beq.n	80026e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80026de:	e0b7      	b.n	8002850 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026e0:	4b61      	ldr	r3, [pc, #388]	; (8002868 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80026e2:	60bb      	str	r3, [r7, #8]
       break;
 80026e4:	e0b7      	b.n	8002856 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026e6:	4b61      	ldr	r3, [pc, #388]	; (800286c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80026e8:	60bb      	str	r3, [r7, #8]
      break;
 80026ea:	e0b4      	b.n	8002856 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026ec:	4b5d      	ldr	r3, [pc, #372]	; (8002864 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026f4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026f6:	4b5b      	ldr	r3, [pc, #364]	; (8002864 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d04d      	beq.n	800279e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002702:	4b58      	ldr	r3, [pc, #352]	; (8002864 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	099b      	lsrs	r3, r3, #6
 8002708:	461a      	mov	r2, r3
 800270a:	f04f 0300 	mov.w	r3, #0
 800270e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002712:	f04f 0100 	mov.w	r1, #0
 8002716:	ea02 0800 	and.w	r8, r2, r0
 800271a:	ea03 0901 	and.w	r9, r3, r1
 800271e:	4640      	mov	r0, r8
 8002720:	4649      	mov	r1, r9
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	f04f 0300 	mov.w	r3, #0
 800272a:	014b      	lsls	r3, r1, #5
 800272c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002730:	0142      	lsls	r2, r0, #5
 8002732:	4610      	mov	r0, r2
 8002734:	4619      	mov	r1, r3
 8002736:	ebb0 0008 	subs.w	r0, r0, r8
 800273a:	eb61 0109 	sbc.w	r1, r1, r9
 800273e:	f04f 0200 	mov.w	r2, #0
 8002742:	f04f 0300 	mov.w	r3, #0
 8002746:	018b      	lsls	r3, r1, #6
 8002748:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800274c:	0182      	lsls	r2, r0, #6
 800274e:	1a12      	subs	r2, r2, r0
 8002750:	eb63 0301 	sbc.w	r3, r3, r1
 8002754:	f04f 0000 	mov.w	r0, #0
 8002758:	f04f 0100 	mov.w	r1, #0
 800275c:	00d9      	lsls	r1, r3, #3
 800275e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002762:	00d0      	lsls	r0, r2, #3
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	eb12 0208 	adds.w	r2, r2, r8
 800276c:	eb43 0309 	adc.w	r3, r3, r9
 8002770:	f04f 0000 	mov.w	r0, #0
 8002774:	f04f 0100 	mov.w	r1, #0
 8002778:	0259      	lsls	r1, r3, #9
 800277a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800277e:	0250      	lsls	r0, r2, #9
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4610      	mov	r0, r2
 8002786:	4619      	mov	r1, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	461a      	mov	r2, r3
 800278c:	f04f 0300 	mov.w	r3, #0
 8002790:	f7fd fd2c 	bl	80001ec <__aeabi_uldivmod>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	4613      	mov	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	e04a      	b.n	8002834 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800279e:	4b31      	ldr	r3, [pc, #196]	; (8002864 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	099b      	lsrs	r3, r3, #6
 80027a4:	461a      	mov	r2, r3
 80027a6:	f04f 0300 	mov.w	r3, #0
 80027aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80027ae:	f04f 0100 	mov.w	r1, #0
 80027b2:	ea02 0400 	and.w	r4, r2, r0
 80027b6:	ea03 0501 	and.w	r5, r3, r1
 80027ba:	4620      	mov	r0, r4
 80027bc:	4629      	mov	r1, r5
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	014b      	lsls	r3, r1, #5
 80027c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80027cc:	0142      	lsls	r2, r0, #5
 80027ce:	4610      	mov	r0, r2
 80027d0:	4619      	mov	r1, r3
 80027d2:	1b00      	subs	r0, r0, r4
 80027d4:	eb61 0105 	sbc.w	r1, r1, r5
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	f04f 0300 	mov.w	r3, #0
 80027e0:	018b      	lsls	r3, r1, #6
 80027e2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80027e6:	0182      	lsls	r2, r0, #6
 80027e8:	1a12      	subs	r2, r2, r0
 80027ea:	eb63 0301 	sbc.w	r3, r3, r1
 80027ee:	f04f 0000 	mov.w	r0, #0
 80027f2:	f04f 0100 	mov.w	r1, #0
 80027f6:	00d9      	lsls	r1, r3, #3
 80027f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027fc:	00d0      	lsls	r0, r2, #3
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	1912      	adds	r2, r2, r4
 8002804:	eb45 0303 	adc.w	r3, r5, r3
 8002808:	f04f 0000 	mov.w	r0, #0
 800280c:	f04f 0100 	mov.w	r1, #0
 8002810:	0299      	lsls	r1, r3, #10
 8002812:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002816:	0290      	lsls	r0, r2, #10
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	4610      	mov	r0, r2
 800281e:	4619      	mov	r1, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	461a      	mov	r2, r3
 8002824:	f04f 0300 	mov.w	r3, #0
 8002828:	f7fd fce0 	bl	80001ec <__aeabi_uldivmod>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	4613      	mov	r3, r2
 8002832:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002834:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	0c1b      	lsrs	r3, r3, #16
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	3301      	adds	r3, #1
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	fbb2 f3f3 	udiv	r3, r2, r3
 800284c:	60bb      	str	r3, [r7, #8]
      break;
 800284e:	e002      	b.n	8002856 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002850:	4b05      	ldr	r3, [pc, #20]	; (8002868 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002852:	60bb      	str	r3, [r7, #8]
      break;
 8002854:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002856:	68bb      	ldr	r3, [r7, #8]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002862:	bf00      	nop
 8002864:	40023800 	.word	0x40023800
 8002868:	00f42400 	.word	0x00f42400
 800286c:	007a1200 	.word	0x007a1200

08002870 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002874:	4b03      	ldr	r3, [pc, #12]	; (8002884 <HAL_RCC_GetHCLKFreq+0x14>)
 8002876:	681b      	ldr	r3, [r3, #0]
}
 8002878:	4618      	mov	r0, r3
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	20000000 	.word	0x20000000

08002888 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800288c:	f7ff fff0 	bl	8002870 <HAL_RCC_GetHCLKFreq>
 8002890:	4602      	mov	r2, r0
 8002892:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	0a9b      	lsrs	r3, r3, #10
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	4903      	ldr	r1, [pc, #12]	; (80028ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800289e:	5ccb      	ldrb	r3, [r1, r3]
 80028a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40023800 	.word	0x40023800
 80028ac:	08003698 	.word	0x08003698

080028b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028b4:	f7ff ffdc 	bl	8002870 <HAL_RCC_GetHCLKFreq>
 80028b8:	4602      	mov	r2, r0
 80028ba:	4b05      	ldr	r3, [pc, #20]	; (80028d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	0b5b      	lsrs	r3, r3, #13
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	4903      	ldr	r1, [pc, #12]	; (80028d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028c6:	5ccb      	ldrb	r3, [r1, r3]
 80028c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40023800 	.word	0x40023800
 80028d4:	08003698 	.word	0x08003698

080028d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e03f      	b.n	800296a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d106      	bne.n	8002904 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7fe f934 	bl	8000b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2224      	movs	r2, #36	; 0x24
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800291a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 f9cb 	bl	8002cb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	691a      	ldr	r2, [r3, #16]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002930:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	695a      	ldr	r2, [r3, #20]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002940:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68da      	ldr	r2, [r3, #12]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002950:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2220      	movs	r2, #32
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b08a      	sub	sp, #40	; 0x28
 8002976:	af02      	add	r7, sp, #8
 8002978:	60f8      	str	r0, [r7, #12]
 800297a:	60b9      	str	r1, [r7, #8]
 800297c:	603b      	str	r3, [r7, #0]
 800297e:	4613      	mov	r3, r2
 8002980:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002982:	2300      	movs	r3, #0
 8002984:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b20      	cmp	r3, #32
 8002990:	d17c      	bne.n	8002a8c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d002      	beq.n	800299e <HAL_UART_Transmit+0x2c>
 8002998:	88fb      	ldrh	r3, [r7, #6]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e075      	b.n	8002a8e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d101      	bne.n	80029b0 <HAL_UART_Transmit+0x3e>
 80029ac:	2302      	movs	r3, #2
 80029ae:	e06e      	b.n	8002a8e <HAL_UART_Transmit+0x11c>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2221      	movs	r2, #33	; 0x21
 80029c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029c6:	f7fe fa95 	bl	8000ef4 <HAL_GetTick>
 80029ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	88fa      	ldrh	r2, [r7, #6]
 80029d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	88fa      	ldrh	r2, [r7, #6]
 80029d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029e0:	d108      	bne.n	80029f4 <HAL_UART_Transmit+0x82>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d104      	bne.n	80029f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	61bb      	str	r3, [r7, #24]
 80029f2:	e003      	b.n	80029fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002a04:	e02a      	b.n	8002a5c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	2180      	movs	r1, #128	; 0x80
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f000 f8e2 	bl	8002bda <UART_WaitOnFlagUntilTimeout>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e036      	b.n	8002a8e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10b      	bne.n	8002a3e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	881b      	ldrh	r3, [r3, #0]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	3302      	adds	r3, #2
 8002a3a:	61bb      	str	r3, [r7, #24]
 8002a3c:	e007      	b.n	8002a4e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	781a      	ldrb	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	3b01      	subs	r3, #1
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1cf      	bne.n	8002a06 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	2140      	movs	r1, #64	; 0x40
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f000 f8b2 	bl	8002bda <UART_WaitOnFlagUntilTimeout>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e006      	b.n	8002a8e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2220      	movs	r2, #32
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	e000      	b.n	8002a8e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a8c:	2302      	movs	r3, #2
  }
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3720      	adds	r7, #32
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b08a      	sub	sp, #40	; 0x28
 8002a9a:	af02      	add	r7, sp, #8
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	603b      	str	r3, [r7, #0]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b20      	cmp	r3, #32
 8002ab4:	f040 808c 	bne.w	8002bd0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d002      	beq.n	8002ac4 <HAL_UART_Receive+0x2e>
 8002abe:	88fb      	ldrh	r3, [r7, #6]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e084      	b.n	8002bd2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d101      	bne.n	8002ad6 <HAL_UART_Receive+0x40>
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	e07d      	b.n	8002bd2 <HAL_UART_Receive+0x13c>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2222      	movs	r2, #34	; 0x22
 8002ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002af2:	f7fe f9ff 	bl	8000ef4 <HAL_GetTick>
 8002af6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	88fa      	ldrh	r2, [r7, #6]
 8002afc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	88fa      	ldrh	r2, [r7, #6]
 8002b02:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b0c:	d108      	bne.n	8002b20 <HAL_UART_Receive+0x8a>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d104      	bne.n	8002b20 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	61bb      	str	r3, [r7, #24]
 8002b1e:	e003      	b.n	8002b28 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002b30:	e043      	b.n	8002bba <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	2120      	movs	r1, #32
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f000 f84c 	bl	8002bda <UART_WaitOnFlagUntilTimeout>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e042      	b.n	8002bd2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10c      	bne.n	8002b6c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	3302      	adds	r3, #2
 8002b68:	61bb      	str	r3, [r7, #24]
 8002b6a:	e01f      	b.n	8002bac <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b74:	d007      	beq.n	8002b86 <HAL_UART_Receive+0xf0>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10a      	bne.n	8002b94 <HAL_UART_Receive+0xfe>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d106      	bne.n	8002b94 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	701a      	strb	r2, [r3, #0]
 8002b92:	e008      	b.n	8002ba6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1b6      	bne.n	8002b32 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	e000      	b.n	8002bd2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002bd0:	2302      	movs	r3, #2
  }
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3720      	adds	r7, #32
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b090      	sub	sp, #64	; 0x40
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	60f8      	str	r0, [r7, #12]
 8002be2:	60b9      	str	r1, [r7, #8]
 8002be4:	603b      	str	r3, [r7, #0]
 8002be6:	4613      	mov	r3, r2
 8002be8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bea:	e050      	b.n	8002c8e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bf2:	d04c      	beq.n	8002c8e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002bf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d007      	beq.n	8002c0a <UART_WaitOnFlagUntilTimeout+0x30>
 8002bfa:	f7fe f97b 	bl	8000ef4 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d241      	bcs.n	8002c8e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	330c      	adds	r3, #12
 8002c10:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c14:	e853 3f00 	ldrex	r3, [r3]
 8002c18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	330c      	adds	r3, #12
 8002c28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c2a:	637a      	str	r2, [r7, #52]	; 0x34
 8002c2c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c32:	e841 2300 	strex	r3, r2, [r1]
 8002c36:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1e5      	bne.n	8002c0a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	3314      	adds	r3, #20
 8002c44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	e853 3f00 	ldrex	r3, [r3]
 8002c4c:	613b      	str	r3, [r7, #16]
   return(result);
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	f023 0301 	bic.w	r3, r3, #1
 8002c54:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	3314      	adds	r3, #20
 8002c5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c5e:	623a      	str	r2, [r7, #32]
 8002c60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c62:	69f9      	ldr	r1, [r7, #28]
 8002c64:	6a3a      	ldr	r2, [r7, #32]
 8002c66:	e841 2300 	strex	r3, r2, [r1]
 8002c6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1e5      	bne.n	8002c3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2220      	movs	r2, #32
 8002c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e00f      	b.n	8002cae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	4013      	ands	r3, r2
 8002c98:	68ba      	ldr	r2, [r7, #8]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	bf0c      	ite	eq
 8002c9e:	2301      	moveq	r3, #1
 8002ca0:	2300      	movne	r3, #0
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	79fb      	ldrb	r3, [r7, #7]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d09f      	beq.n	8002bec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3740      	adds	r7, #64	; 0x40
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
	...

08002cb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cbc:	b09f      	sub	sp, #124	; 0x7c
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cce:	68d9      	ldr	r1, [r3, #12]
 8002cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	ea40 0301 	orr.w	r3, r0, r1
 8002cd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002cfc:	f021 010c 	bic.w	r1, r1, #12
 8002d00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d06:	430b      	orrs	r3, r1
 8002d08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d16:	6999      	ldr	r1, [r3, #24]
 8002d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	ea40 0301 	orr.w	r3, r0, r1
 8002d20:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	4bc5      	ldr	r3, [pc, #788]	; (800303c <UART_SetConfig+0x384>)
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d004      	beq.n	8002d36 <UART_SetConfig+0x7e>
 8002d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	4bc3      	ldr	r3, [pc, #780]	; (8003040 <UART_SetConfig+0x388>)
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d103      	bne.n	8002d3e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d36:	f7ff fdbb 	bl	80028b0 <HAL_RCC_GetPCLK2Freq>
 8002d3a:	6778      	str	r0, [r7, #116]	; 0x74
 8002d3c:	e002      	b.n	8002d44 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d3e:	f7ff fda3 	bl	8002888 <HAL_RCC_GetPCLK1Freq>
 8002d42:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d46:	69db      	ldr	r3, [r3, #28]
 8002d48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d4c:	f040 80b6 	bne.w	8002ebc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d52:	461c      	mov	r4, r3
 8002d54:	f04f 0500 	mov.w	r5, #0
 8002d58:	4622      	mov	r2, r4
 8002d5a:	462b      	mov	r3, r5
 8002d5c:	1891      	adds	r1, r2, r2
 8002d5e:	6439      	str	r1, [r7, #64]	; 0x40
 8002d60:	415b      	adcs	r3, r3
 8002d62:	647b      	str	r3, [r7, #68]	; 0x44
 8002d64:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d68:	1912      	adds	r2, r2, r4
 8002d6a:	eb45 0303 	adc.w	r3, r5, r3
 8002d6e:	f04f 0000 	mov.w	r0, #0
 8002d72:	f04f 0100 	mov.w	r1, #0
 8002d76:	00d9      	lsls	r1, r3, #3
 8002d78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d7c:	00d0      	lsls	r0, r2, #3
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	1911      	adds	r1, r2, r4
 8002d84:	6639      	str	r1, [r7, #96]	; 0x60
 8002d86:	416b      	adcs	r3, r5
 8002d88:	667b      	str	r3, [r7, #100]	; 0x64
 8002d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	f04f 0300 	mov.w	r3, #0
 8002d94:	1891      	adds	r1, r2, r2
 8002d96:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d98:	415b      	adcs	r3, r3
 8002d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002da0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002da4:	f7fd fa22 	bl	80001ec <__aeabi_uldivmod>
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	4ba5      	ldr	r3, [pc, #660]	; (8003044 <UART_SetConfig+0x38c>)
 8002dae:	fba3 2302 	umull	r2, r3, r3, r2
 8002db2:	095b      	lsrs	r3, r3, #5
 8002db4:	011e      	lsls	r6, r3, #4
 8002db6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002db8:	461c      	mov	r4, r3
 8002dba:	f04f 0500 	mov.w	r5, #0
 8002dbe:	4622      	mov	r2, r4
 8002dc0:	462b      	mov	r3, r5
 8002dc2:	1891      	adds	r1, r2, r2
 8002dc4:	6339      	str	r1, [r7, #48]	; 0x30
 8002dc6:	415b      	adcs	r3, r3
 8002dc8:	637b      	str	r3, [r7, #52]	; 0x34
 8002dca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002dce:	1912      	adds	r2, r2, r4
 8002dd0:	eb45 0303 	adc.w	r3, r5, r3
 8002dd4:	f04f 0000 	mov.w	r0, #0
 8002dd8:	f04f 0100 	mov.w	r1, #0
 8002ddc:	00d9      	lsls	r1, r3, #3
 8002dde:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002de2:	00d0      	lsls	r0, r2, #3
 8002de4:	4602      	mov	r2, r0
 8002de6:	460b      	mov	r3, r1
 8002de8:	1911      	adds	r1, r2, r4
 8002dea:	65b9      	str	r1, [r7, #88]	; 0x58
 8002dec:	416b      	adcs	r3, r5
 8002dee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	461a      	mov	r2, r3
 8002df6:	f04f 0300 	mov.w	r3, #0
 8002dfa:	1891      	adds	r1, r2, r2
 8002dfc:	62b9      	str	r1, [r7, #40]	; 0x28
 8002dfe:	415b      	adcs	r3, r3
 8002e00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e06:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002e0a:	f7fd f9ef 	bl	80001ec <__aeabi_uldivmod>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4b8c      	ldr	r3, [pc, #560]	; (8003044 <UART_SetConfig+0x38c>)
 8002e14:	fba3 1302 	umull	r1, r3, r3, r2
 8002e18:	095b      	lsrs	r3, r3, #5
 8002e1a:	2164      	movs	r1, #100	; 0x64
 8002e1c:	fb01 f303 	mul.w	r3, r1, r3
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	3332      	adds	r3, #50	; 0x32
 8002e26:	4a87      	ldr	r2, [pc, #540]	; (8003044 <UART_SetConfig+0x38c>)
 8002e28:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2c:	095b      	lsrs	r3, r3, #5
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e34:	441e      	add	r6, r3
 8002e36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f04f 0100 	mov.w	r1, #0
 8002e3e:	4602      	mov	r2, r0
 8002e40:	460b      	mov	r3, r1
 8002e42:	1894      	adds	r4, r2, r2
 8002e44:	623c      	str	r4, [r7, #32]
 8002e46:	415b      	adcs	r3, r3
 8002e48:	627b      	str	r3, [r7, #36]	; 0x24
 8002e4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e4e:	1812      	adds	r2, r2, r0
 8002e50:	eb41 0303 	adc.w	r3, r1, r3
 8002e54:	f04f 0400 	mov.w	r4, #0
 8002e58:	f04f 0500 	mov.w	r5, #0
 8002e5c:	00dd      	lsls	r5, r3, #3
 8002e5e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002e62:	00d4      	lsls	r4, r2, #3
 8002e64:	4622      	mov	r2, r4
 8002e66:	462b      	mov	r3, r5
 8002e68:	1814      	adds	r4, r2, r0
 8002e6a:	653c      	str	r4, [r7, #80]	; 0x50
 8002e6c:	414b      	adcs	r3, r1
 8002e6e:	657b      	str	r3, [r7, #84]	; 0x54
 8002e70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	461a      	mov	r2, r3
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	1891      	adds	r1, r2, r2
 8002e7c:	61b9      	str	r1, [r7, #24]
 8002e7e:	415b      	adcs	r3, r3
 8002e80:	61fb      	str	r3, [r7, #28]
 8002e82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e86:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002e8a:	f7fd f9af 	bl	80001ec <__aeabi_uldivmod>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	460b      	mov	r3, r1
 8002e92:	4b6c      	ldr	r3, [pc, #432]	; (8003044 <UART_SetConfig+0x38c>)
 8002e94:	fba3 1302 	umull	r1, r3, r3, r2
 8002e98:	095b      	lsrs	r3, r3, #5
 8002e9a:	2164      	movs	r1, #100	; 0x64
 8002e9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	3332      	adds	r3, #50	; 0x32
 8002ea6:	4a67      	ldr	r2, [pc, #412]	; (8003044 <UART_SetConfig+0x38c>)
 8002ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8002eac:	095b      	lsrs	r3, r3, #5
 8002eae:	f003 0207 	and.w	r2, r3, #7
 8002eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4432      	add	r2, r6
 8002eb8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002eba:	e0b9      	b.n	8003030 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ebc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ebe:	461c      	mov	r4, r3
 8002ec0:	f04f 0500 	mov.w	r5, #0
 8002ec4:	4622      	mov	r2, r4
 8002ec6:	462b      	mov	r3, r5
 8002ec8:	1891      	adds	r1, r2, r2
 8002eca:	6139      	str	r1, [r7, #16]
 8002ecc:	415b      	adcs	r3, r3
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ed4:	1912      	adds	r2, r2, r4
 8002ed6:	eb45 0303 	adc.w	r3, r5, r3
 8002eda:	f04f 0000 	mov.w	r0, #0
 8002ede:	f04f 0100 	mov.w	r1, #0
 8002ee2:	00d9      	lsls	r1, r3, #3
 8002ee4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ee8:	00d0      	lsls	r0, r2, #3
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	eb12 0804 	adds.w	r8, r2, r4
 8002ef2:	eb43 0905 	adc.w	r9, r3, r5
 8002ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f04f 0100 	mov.w	r1, #0
 8002f00:	f04f 0200 	mov.w	r2, #0
 8002f04:	f04f 0300 	mov.w	r3, #0
 8002f08:	008b      	lsls	r3, r1, #2
 8002f0a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002f0e:	0082      	lsls	r2, r0, #2
 8002f10:	4640      	mov	r0, r8
 8002f12:	4649      	mov	r1, r9
 8002f14:	f7fd f96a 	bl	80001ec <__aeabi_uldivmod>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	4b49      	ldr	r3, [pc, #292]	; (8003044 <UART_SetConfig+0x38c>)
 8002f1e:	fba3 2302 	umull	r2, r3, r3, r2
 8002f22:	095b      	lsrs	r3, r3, #5
 8002f24:	011e      	lsls	r6, r3, #4
 8002f26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f04f 0100 	mov.w	r1, #0
 8002f2e:	4602      	mov	r2, r0
 8002f30:	460b      	mov	r3, r1
 8002f32:	1894      	adds	r4, r2, r2
 8002f34:	60bc      	str	r4, [r7, #8]
 8002f36:	415b      	adcs	r3, r3
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f3e:	1812      	adds	r2, r2, r0
 8002f40:	eb41 0303 	adc.w	r3, r1, r3
 8002f44:	f04f 0400 	mov.w	r4, #0
 8002f48:	f04f 0500 	mov.w	r5, #0
 8002f4c:	00dd      	lsls	r5, r3, #3
 8002f4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002f52:	00d4      	lsls	r4, r2, #3
 8002f54:	4622      	mov	r2, r4
 8002f56:	462b      	mov	r3, r5
 8002f58:	1814      	adds	r4, r2, r0
 8002f5a:	64bc      	str	r4, [r7, #72]	; 0x48
 8002f5c:	414b      	adcs	r3, r1
 8002f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f04f 0100 	mov.w	r1, #0
 8002f6a:	f04f 0200 	mov.w	r2, #0
 8002f6e:	f04f 0300 	mov.w	r3, #0
 8002f72:	008b      	lsls	r3, r1, #2
 8002f74:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002f78:	0082      	lsls	r2, r0, #2
 8002f7a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002f7e:	f7fd f935 	bl	80001ec <__aeabi_uldivmod>
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	4b2f      	ldr	r3, [pc, #188]	; (8003044 <UART_SetConfig+0x38c>)
 8002f88:	fba3 1302 	umull	r1, r3, r3, r2
 8002f8c:	095b      	lsrs	r3, r3, #5
 8002f8e:	2164      	movs	r1, #100	; 0x64
 8002f90:	fb01 f303 	mul.w	r3, r1, r3
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	3332      	adds	r3, #50	; 0x32
 8002f9a:	4a2a      	ldr	r2, [pc, #168]	; (8003044 <UART_SetConfig+0x38c>)
 8002f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa0:	095b      	lsrs	r3, r3, #5
 8002fa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fa6:	441e      	add	r6, r3
 8002fa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002faa:	4618      	mov	r0, r3
 8002fac:	f04f 0100 	mov.w	r1, #0
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	1894      	adds	r4, r2, r2
 8002fb6:	603c      	str	r4, [r7, #0]
 8002fb8:	415b      	adcs	r3, r3
 8002fba:	607b      	str	r3, [r7, #4]
 8002fbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fc0:	1812      	adds	r2, r2, r0
 8002fc2:	eb41 0303 	adc.w	r3, r1, r3
 8002fc6:	f04f 0400 	mov.w	r4, #0
 8002fca:	f04f 0500 	mov.w	r5, #0
 8002fce:	00dd      	lsls	r5, r3, #3
 8002fd0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002fd4:	00d4      	lsls	r4, r2, #3
 8002fd6:	4622      	mov	r2, r4
 8002fd8:	462b      	mov	r3, r5
 8002fda:	eb12 0a00 	adds.w	sl, r2, r0
 8002fde:	eb43 0b01 	adc.w	fp, r3, r1
 8002fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f04f 0100 	mov.w	r1, #0
 8002fec:	f04f 0200 	mov.w	r2, #0
 8002ff0:	f04f 0300 	mov.w	r3, #0
 8002ff4:	008b      	lsls	r3, r1, #2
 8002ff6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ffa:	0082      	lsls	r2, r0, #2
 8002ffc:	4650      	mov	r0, sl
 8002ffe:	4659      	mov	r1, fp
 8003000:	f7fd f8f4 	bl	80001ec <__aeabi_uldivmod>
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	4b0e      	ldr	r3, [pc, #56]	; (8003044 <UART_SetConfig+0x38c>)
 800300a:	fba3 1302 	umull	r1, r3, r3, r2
 800300e:	095b      	lsrs	r3, r3, #5
 8003010:	2164      	movs	r1, #100	; 0x64
 8003012:	fb01 f303 	mul.w	r3, r1, r3
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	011b      	lsls	r3, r3, #4
 800301a:	3332      	adds	r3, #50	; 0x32
 800301c:	4a09      	ldr	r2, [pc, #36]	; (8003044 <UART_SetConfig+0x38c>)
 800301e:	fba2 2303 	umull	r2, r3, r2, r3
 8003022:	095b      	lsrs	r3, r3, #5
 8003024:	f003 020f 	and.w	r2, r3, #15
 8003028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4432      	add	r2, r6
 800302e:	609a      	str	r2, [r3, #8]
}
 8003030:	bf00      	nop
 8003032:	377c      	adds	r7, #124	; 0x7c
 8003034:	46bd      	mov	sp, r7
 8003036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800303a:	bf00      	nop
 800303c:	40011000 	.word	0x40011000
 8003040:	40011400 	.word	0x40011400
 8003044:	51eb851f 	.word	0x51eb851f

08003048 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003048:	b084      	sub	sp, #16
 800304a:	b580      	push	{r7, lr}
 800304c:	b084      	sub	sp, #16
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
 8003052:	f107 001c 	add.w	r0, r7, #28
 8003056:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800305a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305c:	2b01      	cmp	r3, #1
 800305e:	d122      	bne.n	80030a6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003064:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003074:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800308a:	2b01      	cmp	r3, #1
 800308c:	d105      	bne.n	800309a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 fa82 	bl	80035a4 <USB_CoreReset>
 80030a0:	4603      	mov	r3, r0
 80030a2:	73fb      	strb	r3, [r7, #15]
 80030a4:	e01a      	b.n	80030dc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 fa76 	bl	80035a4 <USB_CoreReset>
 80030b8:	4603      	mov	r3, r0
 80030ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80030bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d106      	bne.n	80030d0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	639a      	str	r2, [r3, #56]	; 0x38
 80030ce:	e005      	b.n	80030dc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80030dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d10b      	bne.n	80030fa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f043 0206 	orr.w	r2, r3, #6
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f043 0220 	orr.w	r2, r3, #32
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003106:	b004      	add	sp, #16
 8003108:	4770      	bx	lr

0800310a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800310a:	b480      	push	{r7}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f023 0201 	bic.w	r2, r3, #1
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	460b      	mov	r3, r1
 8003136:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003148:	78fb      	ldrb	r3, [r7, #3]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d115      	bne.n	800317a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800315a:	2001      	movs	r0, #1
 800315c:	f7fd fed6 	bl	8000f0c <HAL_Delay>
      ms++;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	3301      	adds	r3, #1
 8003164:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 fa0e 	bl	8003588 <USB_GetMode>
 800316c:	4603      	mov	r3, r0
 800316e:	2b01      	cmp	r3, #1
 8003170:	d01e      	beq.n	80031b0 <USB_SetCurrentMode+0x84>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2b31      	cmp	r3, #49	; 0x31
 8003176:	d9f0      	bls.n	800315a <USB_SetCurrentMode+0x2e>
 8003178:	e01a      	b.n	80031b0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800317a:	78fb      	ldrb	r3, [r7, #3]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d115      	bne.n	80031ac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800318c:	2001      	movs	r0, #1
 800318e:	f7fd febd 	bl	8000f0c <HAL_Delay>
      ms++;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	3301      	adds	r3, #1
 8003196:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 f9f5 	bl	8003588 <USB_GetMode>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d005      	beq.n	80031b0 <USB_SetCurrentMode+0x84>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2b31      	cmp	r3, #49	; 0x31
 80031a8:	d9f0      	bls.n	800318c <USB_SetCurrentMode+0x60>
 80031aa:	e001      	b.n	80031b0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e005      	b.n	80031bc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2b32      	cmp	r3, #50	; 0x32
 80031b4:	d101      	bne.n	80031ba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e000      	b.n	80031bc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80031c4:	b084      	sub	sp, #16
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b086      	sub	sp, #24
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
 80031ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80031d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80031d6:	2300      	movs	r3, #0
 80031d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80031de:	2300      	movs	r3, #0
 80031e0:	613b      	str	r3, [r7, #16]
 80031e2:	e009      	b.n	80031f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	3340      	adds	r3, #64	; 0x40
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	2200      	movs	r2, #0
 80031f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	3301      	adds	r3, #1
 80031f6:	613b      	str	r3, [r7, #16]
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	2b0e      	cmp	r3, #14
 80031fc:	d9f2      	bls.n	80031e4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80031fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003200:	2b00      	cmp	r3, #0
 8003202:	d11c      	bne.n	800323e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003212:	f043 0302 	orr.w	r3, r3, #2
 8003216:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003228:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003234:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	639a      	str	r2, [r3, #56]	; 0x38
 800323c:	e00b      	b.n	8003256 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003242:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800325c:	461a      	mov	r2, r3
 800325e:	2300      	movs	r3, #0
 8003260:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003268:	4619      	mov	r1, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003270:	461a      	mov	r2, r3
 8003272:	680b      	ldr	r3, [r1, #0]
 8003274:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003278:	2b01      	cmp	r3, #1
 800327a:	d10c      	bne.n	8003296 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800327c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327e:	2b00      	cmp	r3, #0
 8003280:	d104      	bne.n	800328c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003282:	2100      	movs	r1, #0
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 f945 	bl	8003514 <USB_SetDevSpeed>
 800328a:	e008      	b.n	800329e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800328c:	2101      	movs	r1, #1
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f940 	bl	8003514 <USB_SetDevSpeed>
 8003294:	e003      	b.n	800329e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003296:	2103      	movs	r1, #3
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 f93b 	bl	8003514 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800329e:	2110      	movs	r1, #16
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 f8f3 	bl	800348c <USB_FlushTxFifo>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 f90f 	bl	80034d4 <USB_FlushRxFifo>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032c6:	461a      	mov	r2, r3
 80032c8:	2300      	movs	r3, #0
 80032ca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032d2:	461a      	mov	r2, r3
 80032d4:	2300      	movs	r3, #0
 80032d6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032de:	461a      	mov	r2, r3
 80032e0:	2300      	movs	r3, #0
 80032e2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80032e4:	2300      	movs	r3, #0
 80032e6:	613b      	str	r3, [r7, #16]
 80032e8:	e043      	b.n	8003372 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	015a      	lsls	r2, r3, #5
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	4413      	add	r3, r2
 80032f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003300:	d118      	bne.n	8003334 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10a      	bne.n	800331e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	015a      	lsls	r2, r3, #5
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4413      	add	r3, r2
 8003310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003314:	461a      	mov	r2, r3
 8003316:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800331a:	6013      	str	r3, [r2, #0]
 800331c:	e013      	b.n	8003346 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	4413      	add	r3, r2
 8003326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800332a:	461a      	mov	r2, r3
 800332c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	e008      	b.n	8003346 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	015a      	lsls	r2, r3, #5
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4413      	add	r3, r2
 800333c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003340:	461a      	mov	r2, r3
 8003342:	2300      	movs	r3, #0
 8003344:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	015a      	lsls	r2, r3, #5
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	4413      	add	r3, r2
 800334e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003352:	461a      	mov	r2, r3
 8003354:	2300      	movs	r3, #0
 8003356:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	015a      	lsls	r2, r3, #5
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4413      	add	r3, r2
 8003360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003364:	461a      	mov	r2, r3
 8003366:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800336a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	3301      	adds	r3, #1
 8003370:	613b      	str	r3, [r7, #16]
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	429a      	cmp	r2, r3
 8003378:	d3b7      	bcc.n	80032ea <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800337a:	2300      	movs	r3, #0
 800337c:	613b      	str	r3, [r7, #16]
 800337e:	e043      	b.n	8003408 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	015a      	lsls	r2, r3, #5
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4413      	add	r3, r2
 8003388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003392:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003396:	d118      	bne.n	80033ca <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10a      	bne.n	80033b4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	015a      	lsls	r2, r3, #5
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4413      	add	r3, r2
 80033a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033aa:	461a      	mov	r2, r3
 80033ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	e013      	b.n	80033dc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	015a      	lsls	r2, r3, #5
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4413      	add	r3, r2
 80033bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033c0:	461a      	mov	r2, r3
 80033c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	e008      	b.n	80033dc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	015a      	lsls	r2, r3, #5
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	4413      	add	r3, r2
 80033d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033d6:	461a      	mov	r2, r3
 80033d8:	2300      	movs	r3, #0
 80033da:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	015a      	lsls	r2, r3, #5
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4413      	add	r3, r2
 80033e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e8:	461a      	mov	r2, r3
 80033ea:	2300      	movs	r3, #0
 80033ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	015a      	lsls	r2, r3, #5
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	4413      	add	r3, r2
 80033f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033fa:	461a      	mov	r2, r3
 80033fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003400:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	3301      	adds	r3, #1
 8003406:	613b      	str	r3, [r7, #16]
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	429a      	cmp	r2, r3
 800340e:	d3b7      	bcc.n	8003380 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800341e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003422:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003430:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003434:	2b00      	cmp	r3, #0
 8003436:	d105      	bne.n	8003444 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	f043 0210 	orr.w	r2, r3, #16
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	699a      	ldr	r2, [r3, #24]
 8003448:	4b0f      	ldr	r3, [pc, #60]	; (8003488 <USB_DevInit+0x2c4>)
 800344a:	4313      	orrs	r3, r2
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003452:	2b00      	cmp	r3, #0
 8003454:	d005      	beq.n	8003462 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	f043 0208 	orr.w	r2, r3, #8
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003464:	2b01      	cmp	r3, #1
 8003466:	d107      	bne.n	8003478 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003470:	f043 0304 	orr.w	r3, r3, #4
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003478:	7dfb      	ldrb	r3, [r7, #23]
}
 800347a:	4618      	mov	r0, r3
 800347c:	3718      	adds	r7, #24
 800347e:	46bd      	mov	sp, r7
 8003480:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003484:	b004      	add	sp, #16
 8003486:	4770      	bx	lr
 8003488:	803c3800 	.word	0x803c3800

0800348c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003496:	2300      	movs	r3, #0
 8003498:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	019b      	lsls	r3, r3, #6
 800349e:	f043 0220 	orr.w	r2, r3, #32
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	3301      	adds	r3, #1
 80034aa:	60fb      	str	r3, [r7, #12]
 80034ac:	4a08      	ldr	r2, [pc, #32]	; (80034d0 <USB_FlushTxFifo+0x44>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d901      	bls.n	80034b6 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e006      	b.n	80034c4 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f003 0320 	and.w	r3, r3, #32
 80034be:	2b20      	cmp	r3, #32
 80034c0:	d0f1      	beq.n	80034a6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	00030d40 	.word	0x00030d40

080034d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80034dc:	2300      	movs	r3, #0
 80034de:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2210      	movs	r2, #16
 80034e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	3301      	adds	r3, #1
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	4a08      	ldr	r2, [pc, #32]	; (8003510 <USB_FlushRxFifo+0x3c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d901      	bls.n	80034f6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e006      	b.n	8003504 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	f003 0310 	and.w	r3, r3, #16
 80034fe:	2b10      	cmp	r3, #16
 8003500:	d0f1      	beq.n	80034e6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3714      	adds	r7, #20
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	00030d40 	.word	0x00030d40

08003514 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	460b      	mov	r3, r1
 800351e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	78fb      	ldrb	r3, [r7, #3]
 800352e:	68f9      	ldr	r1, [r7, #12]
 8003530:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003534:	4313      	orrs	r3, r2
 8003536:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003546:	b480      	push	{r7}
 8003548:	b085      	sub	sp, #20
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003560:	f023 0303 	bic.w	r3, r3, #3
 8003564:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003574:	f043 0302 	orr.w	r3, r3, #2
 8003578:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	f003 0301 	and.w	r3, r3, #1
}
 8003598:	4618      	mov	r0, r3
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80035ac:	2300      	movs	r3, #0
 80035ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	3301      	adds	r3, #1
 80035b4:	60fb      	str	r3, [r7, #12]
 80035b6:	4a13      	ldr	r2, [pc, #76]	; (8003604 <USB_CoreReset+0x60>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d901      	bls.n	80035c0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e01a      	b.n	80035f6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	daf3      	bge.n	80035b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	f043 0201 	orr.w	r2, r3, #1
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	3301      	adds	r3, #1
 80035dc:	60fb      	str	r3, [r7, #12]
 80035de:	4a09      	ldr	r2, [pc, #36]	; (8003604 <USB_CoreReset+0x60>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d901      	bls.n	80035e8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e006      	b.n	80035f6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d0f1      	beq.n	80035d8 <USB_CoreReset+0x34>

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	00030d40 	.word	0x00030d40

08003608 <__libc_init_array>:
 8003608:	b570      	push	{r4, r5, r6, lr}
 800360a:	4d0d      	ldr	r5, [pc, #52]	; (8003640 <__libc_init_array+0x38>)
 800360c:	4c0d      	ldr	r4, [pc, #52]	; (8003644 <__libc_init_array+0x3c>)
 800360e:	1b64      	subs	r4, r4, r5
 8003610:	10a4      	asrs	r4, r4, #2
 8003612:	2600      	movs	r6, #0
 8003614:	42a6      	cmp	r6, r4
 8003616:	d109      	bne.n	800362c <__libc_init_array+0x24>
 8003618:	4d0b      	ldr	r5, [pc, #44]	; (8003648 <__libc_init_array+0x40>)
 800361a:	4c0c      	ldr	r4, [pc, #48]	; (800364c <__libc_init_array+0x44>)
 800361c:	f000 f820 	bl	8003660 <_init>
 8003620:	1b64      	subs	r4, r4, r5
 8003622:	10a4      	asrs	r4, r4, #2
 8003624:	2600      	movs	r6, #0
 8003626:	42a6      	cmp	r6, r4
 8003628:	d105      	bne.n	8003636 <__libc_init_array+0x2e>
 800362a:	bd70      	pop	{r4, r5, r6, pc}
 800362c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003630:	4798      	blx	r3
 8003632:	3601      	adds	r6, #1
 8003634:	e7ee      	b.n	8003614 <__libc_init_array+0xc>
 8003636:	f855 3b04 	ldr.w	r3, [r5], #4
 800363a:	4798      	blx	r3
 800363c:	3601      	adds	r6, #1
 800363e:	e7f2      	b.n	8003626 <__libc_init_array+0x1e>
 8003640:	080036a8 	.word	0x080036a8
 8003644:	080036a8 	.word	0x080036a8
 8003648:	080036a8 	.word	0x080036a8
 800364c:	080036ac 	.word	0x080036ac

08003650 <memset>:
 8003650:	4402      	add	r2, r0
 8003652:	4603      	mov	r3, r0
 8003654:	4293      	cmp	r3, r2
 8003656:	d100      	bne.n	800365a <memset+0xa>
 8003658:	4770      	bx	lr
 800365a:	f803 1b01 	strb.w	r1, [r3], #1
 800365e:	e7f9      	b.n	8003654 <memset+0x4>

08003660 <_init>:
 8003660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003662:	bf00      	nop
 8003664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003666:	bc08      	pop	{r3}
 8003668:	469e      	mov	lr, r3
 800366a:	4770      	bx	lr

0800366c <_fini>:
 800366c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800366e:	bf00      	nop
 8003670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003672:	bc08      	pop	{r3}
 8003674:	469e      	mov	lr, r3
 8003676:	4770      	bx	lr
